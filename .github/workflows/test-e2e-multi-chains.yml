name: Test E2E (multi chains)
on: 
  push:
    branches:
      - '**'
  workflow_dispatch: {}

jobs:
  build-aggkit-image:
    name: Build aggkit docker image
    uses: ./.github/workflows/build-aggkit-image.yml
    with:
      go-version: 1.23.x
      docker-image-name: aggkit

  build-tools:
    name: Build aggsender find imported bridge tool
    needs:
      - build-aggkit-image
    runs-on: amd-runner-2204
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      - name: Build Aggsender Find Imported Bridge
        run: make build-tools
      
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: aggsender_find_imported_bridge
          path: ./target/aggsender_find_imported_bridge
  
  test-multi-e2e:
    name: Multi chains E2E test
    needs:
      - build-aggkit-image
      - build-tools
    uses: agglayer/e2e/.github/workflows/aggkit-e2e-multi-chains.yml@22665185bde0d441089c49ba68cd70ca369cc5d9
    secrets: inherit
    with:
      docker-tag: local
      kurtosis-cdk-ref: arpit/bridge-service
      docker-artifact-name: aggkit
      agglayer-e2e-ref: 22665185bde0d441089c49ba68cd70ca369cc5d9
      kurtosis-cdk-enclave-name: aggkit
      aggsender-find-imported-bridge-artifact: aggsender_find_imported_bridge
      kurtosis-cdk-args-1: |
        {
          "deployment_stages": {
            "deploy_l2_contracts": true
          },
          "args": {
            "verbosity": "debug",
            "cdk_node_image": "aggkit:local",
            "agglayer_image": "ghcr.io/agglayer/agglayer@sha256:5715855f2cc6834bd84a99a33937915164648547d21bfb55198948b0ae4e0fad",
            "cdk_erigon_node_image": "hermeznetwork/cdk-erigon:v2.61.16-hotfix2",
            "zkevm_contracts_image": "leovct/zkevm-contracts:v9.0.0-rc.6-pp-fork.12",
            "additional_services": [],
            "consensus_contract_type": "pessimistic",
            "sequencer_type": "erigon",
            "erigon_strict_mode": false,
            "gas_token_enabled": false,
            "enable_normalcy": true,
            "verifier_program_vkey": "0x00766aa16a6efe4ac05c0fe21d4b50f9631dbd1a2663a982da861427085ea2ea",
            "agglayer_prover_sp1_key": "",
            "zkevm_use_real_verifier": false,
            "agglayer_prover_primary_prover": "mock-prover",
            "zkevm_rollup_id": 1,
            "binary_name": "aggkit",
            "components": "aggsender,bridge"
          }
        }
      kurtosis-cdk-args-2: |
        {
          "deployment_stages": {
            "deploy_l1": false,
            "deploy_agglayer": false
          },
          "args": {
            "verbosity": "debug",
            "deployment_suffix": "-002",
            "zkevm_rollup_chain_id": 20202,
            "zkevm_rollup_id": 2,
            "zkevm_l2_sequencer_address": "0xA670342930242407b9984e467353044f8472055e",
            "zkevm_l2_sequencer_private_key": "0x902ed4ce26b536617a4f26da5e0cd0ef61b514a076b4bd766d6ab8b97efbb8c1",
            "zkevm_l2_aggregator_address": "0xfC419a9d9Fe0DfA4Cf9971AcD1Fbcd356DD768FD",
            "zkevm_l2_aggregator_private_key": "0xa70db9fb4b84a6ba18c03cd2266116dd110538d6c4c88e67ca35a29b910da25d",
            "zkevm_l2_claimtxmanager_address": "0x93F63c24735f45Cd0266E87353071B64dd86bc05",
            "zkevm_l2_claimtxmanager_private_key": "0x38718f22097afba13be48d818964326c9c5c48133f51e3c3bfd6faf05f813b34",
            "zkevm_l2_timelock_address": "0xDB22C6f61A82d6AA6d3607289fC93774AC09413a",
            "zkevm_l2_timelock_private_key": "0xae4a69010583a09709baa563fa66f9e6f2dacf9e9c84b89932406b9a0521b561",
            "zkevm_l2_loadtest_address": "0xD5278fC3Dc72A226d5C04c3d2C85fd397A46fA08",
            "zkevm_l2_loadtest_private_key": "0xef4db4f97684b8307adc332ed6c1bc82d66d160f08e7427d082d66a23889625e",
            "zkevm_l2_dac_address": "0xDa07AAD7226B136bc24157Dc4Ff5A813490E20D0",
            "zkevm_l2_dac_private_key": "0x992c9ab11d5eab6b6c2634b8bb0b85f3d8d1acf25024dc99c359cb2afd9b40a7",
            "zkevm_l2_proofsigner_address": "0xf1a661D7b601Ec46a040f57193cC99aB8c4132FA",
            "zkevm_l2_proofsigner_private_key": "0xc7fe3a006d75ba9326d9792523385abb49057c66aee0b8b4248821a89713f975",
            "cdk_node_image": "aggkit:local",
            "cdk_erigon_node_image": "hermeznetwork/cdk-erigon:v2.61.16-hotfix2",
            "zkevm_contracts_image": "leovct/zkevm-contracts:v9.0.0-rc.6-pp-fork.12",
            "additional_services": [],
            "consensus_contract_type": "pessimistic",
            "sequencer_type": "erigon",
            "erigon_strict_mode": false,
            "gas_token_enabled": false,
            "zkevm_use_real_verifier": false,
            "enable_normalcy": true,
            "verifier_program_vkey": "0x00766aa16a6efe4ac05c0fe21d4b50f9631dbd1a2663a982da861427085ea2ea",
            "binary_name": "aggkit",
            "components": "aggsender,bridge"
          }
        }

  check-test-multi-e2e-result:
    name: Check E2E results
    needs:
      - test-multi-e2e
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: exit 1
        if: ${{ contains(fromJSON('["failure", "cancelled"]'), needs.test-multi-e2e.result) }}
