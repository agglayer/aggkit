// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	node "github.com/agglayer/aggkit/agglayer/proto/node"
)

// NodeStateServiceClient is an autogenerated mock type for the NodeStateServiceClient type
type NodeStateServiceClient struct {
	mock.Mock
}

type NodeStateServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeStateServiceClient) EXPECT() *NodeStateServiceClient_Expecter {
	return &NodeStateServiceClient_Expecter{mock: &_m.Mock}
}

// GetCertificateHeader provides a mock function with given fields: ctx, in, opts
func (_m *NodeStateServiceClient) GetCertificateHeader(ctx context.Context, in *node.GetCertificateHeaderRequest, opts ...grpc.CallOption) (*node.GetCertificateHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateHeader")
	}

	var r0 *node.GetCertificateHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.GetCertificateHeaderRequest, ...grpc.CallOption) (*node.GetCertificateHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *node.GetCertificateHeaderRequest, ...grpc.CallOption) *node.GetCertificateHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.GetCertificateHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *node.GetCertificateHeaderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeStateServiceClient_GetCertificateHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateHeader'
type NodeStateServiceClient_GetCertificateHeader_Call struct {
	*mock.Call
}

// GetCertificateHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.GetCertificateHeaderRequest
//   - opts ...grpc.CallOption
func (_e *NodeStateServiceClient_Expecter) GetCertificateHeader(ctx interface{}, in interface{}, opts ...interface{}) *NodeStateServiceClient_GetCertificateHeader_Call {
	return &NodeStateServiceClient_GetCertificateHeader_Call{Call: _e.mock.On("GetCertificateHeader",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeStateServiceClient_GetCertificateHeader_Call) Run(run func(ctx context.Context, in *node.GetCertificateHeaderRequest, opts ...grpc.CallOption)) *NodeStateServiceClient_GetCertificateHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*node.GetCertificateHeaderRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeStateServiceClient_GetCertificateHeader_Call) Return(_a0 *node.GetCertificateHeaderResponse, _a1 error) *NodeStateServiceClient_GetCertificateHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeStateServiceClient_GetCertificateHeader_Call) RunAndReturn(run func(context.Context, *node.GetCertificateHeaderRequest, ...grpc.CallOption) (*node.GetCertificateHeaderResponse, error)) *NodeStateServiceClient_GetCertificateHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestCertificateHeader provides a mock function with given fields: ctx, in, opts
func (_m *NodeStateServiceClient) GetLatestCertificateHeader(ctx context.Context, in *node.GetLatestCertificateHeaderRequest, opts ...grpc.CallOption) (*node.GetLatestCertificateHeaderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCertificateHeader")
	}

	var r0 *node.GetLatestCertificateHeaderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *node.GetLatestCertificateHeaderRequest, ...grpc.CallOption) (*node.GetLatestCertificateHeaderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *node.GetLatestCertificateHeaderRequest, ...grpc.CallOption) *node.GetLatestCertificateHeaderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.GetLatestCertificateHeaderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *node.GetLatestCertificateHeaderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeStateServiceClient_GetLatestCertificateHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCertificateHeader'
type NodeStateServiceClient_GetLatestCertificateHeader_Call struct {
	*mock.Call
}

// GetLatestCertificateHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - in *node.GetLatestCertificateHeaderRequest
//   - opts ...grpc.CallOption
func (_e *NodeStateServiceClient_Expecter) GetLatestCertificateHeader(ctx interface{}, in interface{}, opts ...interface{}) *NodeStateServiceClient_GetLatestCertificateHeader_Call {
	return &NodeStateServiceClient_GetLatestCertificateHeader_Call{Call: _e.mock.On("GetLatestCertificateHeader",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeStateServiceClient_GetLatestCertificateHeader_Call) Run(run func(ctx context.Context, in *node.GetLatestCertificateHeaderRequest, opts ...grpc.CallOption)) *NodeStateServiceClient_GetLatestCertificateHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*node.GetLatestCertificateHeaderRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeStateServiceClient_GetLatestCertificateHeader_Call) Return(_a0 *node.GetLatestCertificateHeaderResponse, _a1 error) *NodeStateServiceClient_GetLatestCertificateHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeStateServiceClient_GetLatestCertificateHeader_Call) RunAndReturn(run func(context.Context, *node.GetLatestCertificateHeaderRequest, ...grpc.CallOption) (*node.GetLatestCertificateHeaderResponse, error)) *NodeStateServiceClient_GetLatestCertificateHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeStateServiceClient creates a new instance of NodeStateServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeStateServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeStateServiceClient {
	mock := &NodeStateServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
