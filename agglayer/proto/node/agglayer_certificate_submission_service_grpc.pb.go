// Proto definition for Agglayer Certificate Submition Service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: node/agglayer_certificate_submission_service.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AgglayerCertificateSubmissionService_SubmitCertificate_FullMethodName = "/proto.AgglayerCertificateSubmissionService/SubmitCertificate"
)

// AgglayerCertificateSubmissionServiceClient is the client API for AgglayerCertificateSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for submitting certificate to an agglayer node.
type AgglayerCertificateSubmissionServiceClient interface {
	// Method used to submit a certificate.
	SubmitCertificate(ctx context.Context, in *SubmitCertificateRequest, opts ...grpc.CallOption) (*SubmitCertificateResponse, error)
}

type agglayerCertificateSubmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgglayerCertificateSubmissionServiceClient(cc grpc.ClientConnInterface) AgglayerCertificateSubmissionServiceClient {
	return &agglayerCertificateSubmissionServiceClient{cc}
}

func (c *agglayerCertificateSubmissionServiceClient) SubmitCertificate(ctx context.Context, in *SubmitCertificateRequest, opts ...grpc.CallOption) (*SubmitCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitCertificateResponse)
	err := c.cc.Invoke(ctx, AgglayerCertificateSubmissionService_SubmitCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgglayerCertificateSubmissionServiceServer is the server API for AgglayerCertificateSubmissionService service.
// All implementations must embed UnimplementedAgglayerCertificateSubmissionServiceServer
// for forward compatibility
//
// Service for submitting certificate to an agglayer node.
type AgglayerCertificateSubmissionServiceServer interface {
	// Method used to submit a certificate.
	SubmitCertificate(context.Context, *SubmitCertificateRequest) (*SubmitCertificateResponse, error)
	mustEmbedUnimplementedAgglayerCertificateSubmissionServiceServer()
}

// UnimplementedAgglayerCertificateSubmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgglayerCertificateSubmissionServiceServer struct {
}

func (UnimplementedAgglayerCertificateSubmissionServiceServer) SubmitCertificate(context.Context, *SubmitCertificateRequest) (*SubmitCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCertificate not implemented")
}
func (UnimplementedAgglayerCertificateSubmissionServiceServer) mustEmbedUnimplementedAgglayerCertificateSubmissionServiceServer() {
}

// UnsafeAgglayerCertificateSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgglayerCertificateSubmissionServiceServer will
// result in compilation errors.
type UnsafeAgglayerCertificateSubmissionServiceServer interface {
	mustEmbedUnimplementedAgglayerCertificateSubmissionServiceServer()
}

func RegisterAgglayerCertificateSubmissionServiceServer(s grpc.ServiceRegistrar, srv AgglayerCertificateSubmissionServiceServer) {
	s.RegisterService(&AgglayerCertificateSubmissionService_ServiceDesc, srv)
}

func _AgglayerCertificateSubmissionService_SubmitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgglayerCertificateSubmissionServiceServer).SubmitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgglayerCertificateSubmissionService_SubmitCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgglayerCertificateSubmissionServiceServer).SubmitCertificate(ctx, req.(*SubmitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgglayerCertificateSubmissionService_ServiceDesc is the grpc.ServiceDesc for AgglayerCertificateSubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgglayerCertificateSubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgglayerCertificateSubmissionService",
	HandlerType: (*AgglayerCertificateSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitCertificate",
			Handler:    _AgglayerCertificateSubmissionService_SubmitCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/agglayer_certificate_submission_service.proto",
}
