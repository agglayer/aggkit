// Proto definition for Agglayer Configuration Service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: node/agglayer_configuration_service.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AgglayerConfigurationService_GetEpochConfiguration_FullMethodName = "/proto.AgglayerConfigurationService/GetEpochConfiguration"
)

// AgglayerConfigurationServiceClient is the client API for AgglayerConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for querying the current epoch configuration.
type AgglayerConfigurationServiceClient interface {
	// Method used to get the current epoch configuration.
	GetEpochConfiguration(ctx context.Context, in *GetEpochConfigurationRequest, opts ...grpc.CallOption) (*GetEpochConfigurationResponse, error)
}

type agglayerConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgglayerConfigurationServiceClient(cc grpc.ClientConnInterface) AgglayerConfigurationServiceClient {
	return &agglayerConfigurationServiceClient{cc}
}

func (c *agglayerConfigurationServiceClient) GetEpochConfiguration(ctx context.Context, in *GetEpochConfigurationRequest, opts ...grpc.CallOption) (*GetEpochConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpochConfigurationResponse)
	err := c.cc.Invoke(ctx, AgglayerConfigurationService_GetEpochConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgglayerConfigurationServiceServer is the server API for AgglayerConfigurationService service.
// All implementations must embed UnimplementedAgglayerConfigurationServiceServer
// for forward compatibility
//
// Service for querying the current epoch configuration.
type AgglayerConfigurationServiceServer interface {
	// Method used to get the current epoch configuration.
	GetEpochConfiguration(context.Context, *GetEpochConfigurationRequest) (*GetEpochConfigurationResponse, error)
	mustEmbedUnimplementedAgglayerConfigurationServiceServer()
}

// UnimplementedAgglayerConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgglayerConfigurationServiceServer struct {
}

func (UnimplementedAgglayerConfigurationServiceServer) GetEpochConfiguration(context.Context, *GetEpochConfigurationRequest) (*GetEpochConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochConfiguration not implemented")
}
func (UnimplementedAgglayerConfigurationServiceServer) mustEmbedUnimplementedAgglayerConfigurationServiceServer() {
}

// UnsafeAgglayerConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgglayerConfigurationServiceServer will
// result in compilation errors.
type UnsafeAgglayerConfigurationServiceServer interface {
	mustEmbedUnimplementedAgglayerConfigurationServiceServer()
}

func RegisterAgglayerConfigurationServiceServer(s grpc.ServiceRegistrar, srv AgglayerConfigurationServiceServer) {
	s.RegisterService(&AgglayerConfigurationService_ServiceDesc, srv)
}

func _AgglayerConfigurationService_GetEpochConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgglayerConfigurationServiceServer).GetEpochConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgglayerConfigurationService_GetEpochConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgglayerConfigurationServiceServer).GetEpochConfiguration(ctx, req.(*GetEpochConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgglayerConfigurationService_ServiceDesc is the grpc.ServiceDesc for AgglayerConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgglayerConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgglayerConfigurationService",
	HandlerType: (*AgglayerConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEpochConfiguration",
			Handler:    _AgglayerConfigurationService_GetEpochConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/agglayer_configuration_service.proto",
}
