// Proto definition for Agglayer Network State Service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.3
// source: node/agglayer_network_state_service.proto

package node

import (
	types "github.com/agglayer/aggkit/agglayer/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to get the latest known certificate header for a network.
type GetLatestKnownCertificateHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The network identifier.
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *GetLatestKnownCertificateHeaderRequest) Reset() {
	*x = GetLatestKnownCertificateHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestKnownCertificateHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestKnownCertificateHeaderRequest) ProtoMessage() {}

func (x *GetLatestKnownCertificateHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestKnownCertificateHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLatestKnownCertificateHeaderRequest) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetLatestKnownCertificateHeaderRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

// Response to the latest known certificate header request.
type GetLatestKnownCertificateHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest known certificate header.
	CertificateHeader *types.CertificateHeader `protobuf:"bytes,1,opt,name=certificate_header,json=certificateHeader,proto3" json:"certificate_header,omitempty"`
}

func (x *GetLatestKnownCertificateHeaderResponse) Reset() {
	*x = GetLatestKnownCertificateHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestKnownCertificateHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestKnownCertificateHeaderResponse) ProtoMessage() {}

func (x *GetLatestKnownCertificateHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestKnownCertificateHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetLatestKnownCertificateHeaderResponse) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetLatestKnownCertificateHeaderResponse) GetCertificateHeader() *types.CertificateHeader {
	if x != nil {
		return x.CertificateHeader
	}
	return nil
}

// Request to get the latest settled certificate header for a network.
type GetLatestSettledCertificateHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The network identifier.
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *GetLatestSettledCertificateHeaderRequest) Reset() {
	*x = GetLatestSettledCertificateHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestSettledCertificateHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSettledCertificateHeaderRequest) ProtoMessage() {}

func (x *GetLatestSettledCertificateHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSettledCertificateHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLatestSettledCertificateHeaderRequest) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetLatestSettledCertificateHeaderRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

// Response to the latest settled certificate header request.
type GetLatestSettledCertificateHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest settled certificate header.
	CertificateHeader *types.CertificateHeader `protobuf:"bytes,1,opt,name=certificate_header,json=certificateHeader,proto3" json:"certificate_header,omitempty"`
}

func (x *GetLatestSettledCertificateHeaderResponse) Reset() {
	*x = GetLatestSettledCertificateHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestSettledCertificateHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSettledCertificateHeaderResponse) ProtoMessage() {}

func (x *GetLatestSettledCertificateHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSettledCertificateHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetLatestSettledCertificateHeaderResponse) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestSettledCertificateHeaderResponse) GetCertificateHeader() *types.CertificateHeader {
	if x != nil {
		return x.CertificateHeader
	}
	return nil
}

// Request to get the latest pending certificate header for a network.
type GetLatestPendingCertificateHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The network identifier.
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *GetLatestPendingCertificateHeaderRequest) Reset() {
	*x = GetLatestPendingCertificateHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPendingCertificateHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPendingCertificateHeaderRequest) ProtoMessage() {}

func (x *GetLatestPendingCertificateHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPendingCertificateHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLatestPendingCertificateHeaderRequest) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLatestPendingCertificateHeaderRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

// Response to the latest pending certificate header request.
type GetLatestPendingCertificateHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest pending certificate header.
	CertificateHeader *types.CertificateHeader `protobuf:"bytes,1,opt,name=certificate_header,json=certificateHeader,proto3" json:"certificate_header,omitempty"`
}

func (x *GetLatestPendingCertificateHeaderResponse) Reset() {
	*x = GetLatestPendingCertificateHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_agglayer_network_state_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPendingCertificateHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPendingCertificateHeaderResponse) ProtoMessage() {}

func (x *GetLatestPendingCertificateHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_agglayer_network_state_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPendingCertificateHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetLatestPendingCertificateHeaderResponse) Descriptor() ([]byte, []int) {
	return file_node_agglayer_network_state_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetLatestPendingCertificateHeaderResponse) GetCertificateHeader() *types.CertificateHeader {
	if x != nil {
		return x.CertificateHeader
	}
	return nil
}

var File_node_agglayer_network_state_service_proto protoreflect.FileDescriptor

var file_node_agglayer_network_state_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x49, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x32, 0xb2, 0x03, 0x0a, 0x1b, 0x41, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x61, 0x67, 0x67, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x3b, 0x6e, 0x6f, 0x64, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_agglayer_network_state_service_proto_rawDescOnce sync.Once
	file_node_agglayer_network_state_service_proto_rawDescData = file_node_agglayer_network_state_service_proto_rawDesc
)

func file_node_agglayer_network_state_service_proto_rawDescGZIP() []byte {
	file_node_agglayer_network_state_service_proto_rawDescOnce.Do(func() {
		file_node_agglayer_network_state_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_agglayer_network_state_service_proto_rawDescData)
	})
	return file_node_agglayer_network_state_service_proto_rawDescData
}

var file_node_agglayer_network_state_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_node_agglayer_network_state_service_proto_goTypes = []interface{}{
	(*GetLatestKnownCertificateHeaderRequest)(nil),    // 0: proto.GetLatestKnownCertificateHeaderRequest
	(*GetLatestKnownCertificateHeaderResponse)(nil),   // 1: proto.GetLatestKnownCertificateHeaderResponse
	(*GetLatestSettledCertificateHeaderRequest)(nil),  // 2: proto.GetLatestSettledCertificateHeaderRequest
	(*GetLatestSettledCertificateHeaderResponse)(nil), // 3: proto.GetLatestSettledCertificateHeaderResponse
	(*GetLatestPendingCertificateHeaderRequest)(nil),  // 4: proto.GetLatestPendingCertificateHeaderRequest
	(*GetLatestPendingCertificateHeaderResponse)(nil), // 5: proto.GetLatestPendingCertificateHeaderResponse
	(*types.CertificateHeader)(nil),                   // 6: proto.types.CertificateHeader
}
var file_node_agglayer_network_state_service_proto_depIdxs = []int32{
	6, // 0: proto.GetLatestKnownCertificateHeaderResponse.certificate_header:type_name -> proto.types.CertificateHeader
	6, // 1: proto.GetLatestSettledCertificateHeaderResponse.certificate_header:type_name -> proto.types.CertificateHeader
	6, // 2: proto.GetLatestPendingCertificateHeaderResponse.certificate_header:type_name -> proto.types.CertificateHeader
	0, // 3: proto.AgglayerNetworkStateService.GetLatestKnownCertificateHeader:input_type -> proto.GetLatestKnownCertificateHeaderRequest
	2, // 4: proto.AgglayerNetworkStateService.GetLatestSettledCertificateHeader:input_type -> proto.GetLatestSettledCertificateHeaderRequest
	4, // 5: proto.AgglayerNetworkStateService.GetLatestPendingCertificateHeader:input_type -> proto.GetLatestPendingCertificateHeaderRequest
	1, // 6: proto.AgglayerNetworkStateService.GetLatestKnownCertificateHeader:output_type -> proto.GetLatestKnownCertificateHeaderResponse
	3, // 7: proto.AgglayerNetworkStateService.GetLatestSettledCertificateHeader:output_type -> proto.GetLatestSettledCertificateHeaderResponse
	5, // 8: proto.AgglayerNetworkStateService.GetLatestPendingCertificateHeader:output_type -> proto.GetLatestPendingCertificateHeaderResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_node_agglayer_network_state_service_proto_init() }
func file_node_agglayer_network_state_service_proto_init() {
	if File_node_agglayer_network_state_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_agglayer_network_state_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestKnownCertificateHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_agglayer_network_state_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestKnownCertificateHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_agglayer_network_state_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestSettledCertificateHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_agglayer_network_state_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestSettledCertificateHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_agglayer_network_state_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPendingCertificateHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_agglayer_network_state_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPendingCertificateHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_agglayer_network_state_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_agglayer_network_state_service_proto_goTypes,
		DependencyIndexes: file_node_agglayer_network_state_service_proto_depIdxs,
		MessageInfos:      file_node_agglayer_network_state_service_proto_msgTypes,
	}.Build()
	File_node_agglayer_network_state_service_proto = out.File
	file_node_agglayer_network_state_service_proto_rawDesc = nil
	file_node_agglayer_network_state_service_proto_goTypes = nil
	file_node_agglayer_network_state_service_proto_depIdxs = nil
}
