// Proto definition for Agglayer Network State Service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: node/agglayer_network_state_service.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AgglayerNetworkStateService_GetLatestKnownCertificateHeader_FullMethodName   = "/proto.AgglayerNetworkStateService/GetLatestKnownCertificateHeader"
	AgglayerNetworkStateService_GetLatestSettledCertificateHeader_FullMethodName = "/proto.AgglayerNetworkStateService/GetLatestSettledCertificateHeader"
	AgglayerNetworkStateService_GetLatestPendingCertificateHeader_FullMethodName = "/proto.AgglayerNetworkStateService/GetLatestPendingCertificateHeader"
)

// AgglayerNetworkStateServiceClient is the client API for AgglayerNetworkStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for querying agglayer network state.
type AgglayerNetworkStateServiceClient interface {
	// Method used to get the latest known certificate header for a network.
	GetLatestKnownCertificateHeader(ctx context.Context, in *GetLatestKnownCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestKnownCertificateHeaderResponse, error)
	// Method used to get the latest settled certificate header for a network.
	GetLatestSettledCertificateHeader(ctx context.Context, in *GetLatestSettledCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestSettledCertificateHeaderResponse, error)
	// Method used to get the latest pending certificate header for a network.
	GetLatestPendingCertificateHeader(ctx context.Context, in *GetLatestPendingCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestPendingCertificateHeaderResponse, error)
}

type agglayerNetworkStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgglayerNetworkStateServiceClient(cc grpc.ClientConnInterface) AgglayerNetworkStateServiceClient {
	return &agglayerNetworkStateServiceClient{cc}
}

func (c *agglayerNetworkStateServiceClient) GetLatestKnownCertificateHeader(ctx context.Context, in *GetLatestKnownCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestKnownCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestKnownCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, AgglayerNetworkStateService_GetLatestKnownCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agglayerNetworkStateServiceClient) GetLatestSettledCertificateHeader(ctx context.Context, in *GetLatestSettledCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestSettledCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestSettledCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, AgglayerNetworkStateService_GetLatestSettledCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agglayerNetworkStateServiceClient) GetLatestPendingCertificateHeader(ctx context.Context, in *GetLatestPendingCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestPendingCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestPendingCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, AgglayerNetworkStateService_GetLatestPendingCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgglayerNetworkStateServiceServer is the server API for AgglayerNetworkStateService service.
// All implementations must embed UnimplementedAgglayerNetworkStateServiceServer
// for forward compatibility
//
// Service for querying agglayer network state.
type AgglayerNetworkStateServiceServer interface {
	// Method used to get the latest known certificate header for a network.
	GetLatestKnownCertificateHeader(context.Context, *GetLatestKnownCertificateHeaderRequest) (*GetLatestKnownCertificateHeaderResponse, error)
	// Method used to get the latest settled certificate header for a network.
	GetLatestSettledCertificateHeader(context.Context, *GetLatestSettledCertificateHeaderRequest) (*GetLatestSettledCertificateHeaderResponse, error)
	// Method used to get the latest pending certificate header for a network.
	GetLatestPendingCertificateHeader(context.Context, *GetLatestPendingCertificateHeaderRequest) (*GetLatestPendingCertificateHeaderResponse, error)
	mustEmbedUnimplementedAgglayerNetworkStateServiceServer()
}

// UnimplementedAgglayerNetworkStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgglayerNetworkStateServiceServer struct {
}

func (UnimplementedAgglayerNetworkStateServiceServer) GetLatestKnownCertificateHeader(context.Context, *GetLatestKnownCertificateHeaderRequest) (*GetLatestKnownCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestKnownCertificateHeader not implemented")
}
func (UnimplementedAgglayerNetworkStateServiceServer) GetLatestSettledCertificateHeader(context.Context, *GetLatestSettledCertificateHeaderRequest) (*GetLatestSettledCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSettledCertificateHeader not implemented")
}
func (UnimplementedAgglayerNetworkStateServiceServer) GetLatestPendingCertificateHeader(context.Context, *GetLatestPendingCertificateHeaderRequest) (*GetLatestPendingCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPendingCertificateHeader not implemented")
}
func (UnimplementedAgglayerNetworkStateServiceServer) mustEmbedUnimplementedAgglayerNetworkStateServiceServer() {
}

// UnsafeAgglayerNetworkStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgglayerNetworkStateServiceServer will
// result in compilation errors.
type UnsafeAgglayerNetworkStateServiceServer interface {
	mustEmbedUnimplementedAgglayerNetworkStateServiceServer()
}

func RegisterAgglayerNetworkStateServiceServer(s grpc.ServiceRegistrar, srv AgglayerNetworkStateServiceServer) {
	s.RegisterService(&AgglayerNetworkStateService_ServiceDesc, srv)
}

func _AgglayerNetworkStateService_GetLatestKnownCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestKnownCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestKnownCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgglayerNetworkStateService_GetLatestKnownCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestKnownCertificateHeader(ctx, req.(*GetLatestKnownCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgglayerNetworkStateService_GetLatestSettledCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSettledCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestSettledCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgglayerNetworkStateService_GetLatestSettledCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestSettledCertificateHeader(ctx, req.(*GetLatestSettledCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgglayerNetworkStateService_GetLatestPendingCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPendingCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestPendingCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgglayerNetworkStateService_GetLatestPendingCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgglayerNetworkStateServiceServer).GetLatestPendingCertificateHeader(ctx, req.(*GetLatestPendingCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgglayerNetworkStateService_ServiceDesc is the grpc.ServiceDesc for AgglayerNetworkStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgglayerNetworkStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgglayerNetworkStateService",
	HandlerType: (*AgglayerNetworkStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestKnownCertificateHeader",
			Handler:    _AgglayerNetworkStateService_GetLatestKnownCertificateHeader_Handler,
		},
		{
			MethodName: "GetLatestSettledCertificateHeader",
			Handler:    _AgglayerNetworkStateService_GetLatestSettledCertificateHeader_Handler,
		},
		{
			MethodName: "GetLatestPendingCertificateHeader",
			Handler:    _AgglayerNetworkStateService_GetLatestPendingCertificateHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/agglayer_network_state_service.proto",
}
