// Proto definition for Agglayer Node State Service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: node/agglayer_network_state_service.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NodeStateService_GetCertificateHeader_FullMethodName              = "/agglayer.node.v1.NodeStateService/GetCertificateHeader"
	NodeStateService_GetLatestKnownCertificateHeader_FullMethodName   = "/agglayer.node.v1.NodeStateService/GetLatestKnownCertificateHeader"
	NodeStateService_GetLatestSettledCertificateHeader_FullMethodName = "/agglayer.node.v1.NodeStateService/GetLatestSettledCertificateHeader"
	NodeStateService_GetLatestPendingCertificateHeader_FullMethodName = "/agglayer.node.v1.NodeStateService/GetLatestPendingCertificateHeader"
)

// NodeStateServiceClient is the client API for NodeStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for querying agglayer node state.
type NodeStateServiceClient interface {
	// Method used to get a CertificateHeader for a particular CertificateId.
	GetCertificateHeader(ctx context.Context, in *GetCertificateHeaderRequest, opts ...grpc.CallOption) (*GetCertificateHeaderResponse, error)
	// Method used to get the latest known certificate header for a network.
	GetLatestKnownCertificateHeader(ctx context.Context, in *GetLatestKnownCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestKnownCertificateHeaderResponse, error)
	// Method used to get the latest settled certificate header for a network.
	GetLatestSettledCertificateHeader(ctx context.Context, in *GetLatestSettledCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestSettledCertificateHeaderResponse, error)
	// Method used to get the latest pending certificate header for a network.
	GetLatestPendingCertificateHeader(ctx context.Context, in *GetLatestPendingCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestPendingCertificateHeaderResponse, error)
}

type nodeStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeStateServiceClient(cc grpc.ClientConnInterface) NodeStateServiceClient {
	return &nodeStateServiceClient{cc}
}

func (c *nodeStateServiceClient) GetCertificateHeader(ctx context.Context, in *GetCertificateHeaderRequest, opts ...grpc.CallOption) (*GetCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, NodeStateService_GetCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeStateServiceClient) GetLatestKnownCertificateHeader(ctx context.Context, in *GetLatestKnownCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestKnownCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestKnownCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, NodeStateService_GetLatestKnownCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeStateServiceClient) GetLatestSettledCertificateHeader(ctx context.Context, in *GetLatestSettledCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestSettledCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestSettledCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, NodeStateService_GetLatestSettledCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeStateServiceClient) GetLatestPendingCertificateHeader(ctx context.Context, in *GetLatestPendingCertificateHeaderRequest, opts ...grpc.CallOption) (*GetLatestPendingCertificateHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestPendingCertificateHeaderResponse)
	err := c.cc.Invoke(ctx, NodeStateService_GetLatestPendingCertificateHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeStateServiceServer is the server API for NodeStateService service.
// All implementations must embed UnimplementedNodeStateServiceServer
// for forward compatibility
//
// Service for querying agglayer node state.
type NodeStateServiceServer interface {
	// Method used to get a CertificateHeader for a particular CertificateId.
	GetCertificateHeader(context.Context, *GetCertificateHeaderRequest) (*GetCertificateHeaderResponse, error)
	// Method used to get the latest known certificate header for a network.
	GetLatestKnownCertificateHeader(context.Context, *GetLatestKnownCertificateHeaderRequest) (*GetLatestKnownCertificateHeaderResponse, error)
	// Method used to get the latest settled certificate header for a network.
	GetLatestSettledCertificateHeader(context.Context, *GetLatestSettledCertificateHeaderRequest) (*GetLatestSettledCertificateHeaderResponse, error)
	// Method used to get the latest pending certificate header for a network.
	GetLatestPendingCertificateHeader(context.Context, *GetLatestPendingCertificateHeaderRequest) (*GetLatestPendingCertificateHeaderResponse, error)
	mustEmbedUnimplementedNodeStateServiceServer()
}

// UnimplementedNodeStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeStateServiceServer struct {
}

func (UnimplementedNodeStateServiceServer) GetCertificateHeader(context.Context, *GetCertificateHeaderRequest) (*GetCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateHeader not implemented")
}
func (UnimplementedNodeStateServiceServer) GetLatestKnownCertificateHeader(context.Context, *GetLatestKnownCertificateHeaderRequest) (*GetLatestKnownCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestKnownCertificateHeader not implemented")
}
func (UnimplementedNodeStateServiceServer) GetLatestSettledCertificateHeader(context.Context, *GetLatestSettledCertificateHeaderRequest) (*GetLatestSettledCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSettledCertificateHeader not implemented")
}
func (UnimplementedNodeStateServiceServer) GetLatestPendingCertificateHeader(context.Context, *GetLatestPendingCertificateHeaderRequest) (*GetLatestPendingCertificateHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPendingCertificateHeader not implemented")
}
func (UnimplementedNodeStateServiceServer) mustEmbedUnimplementedNodeStateServiceServer() {}

// UnsafeNodeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeStateServiceServer will
// result in compilation errors.
type UnsafeNodeStateServiceServer interface {
	mustEmbedUnimplementedNodeStateServiceServer()
}

func RegisterNodeStateServiceServer(s grpc.ServiceRegistrar, srv NodeStateServiceServer) {
	s.RegisterService(&NodeStateService_ServiceDesc, srv)
}

func _NodeStateService_GetCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateServiceServer).GetCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeStateService_GetCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateServiceServer).GetCertificateHeader(ctx, req.(*GetCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeStateService_GetLatestKnownCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestKnownCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateServiceServer).GetLatestKnownCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeStateService_GetLatestKnownCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateServiceServer).GetLatestKnownCertificateHeader(ctx, req.(*GetLatestKnownCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeStateService_GetLatestSettledCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSettledCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateServiceServer).GetLatestSettledCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeStateService_GetLatestSettledCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateServiceServer).GetLatestSettledCertificateHeader(ctx, req.(*GetLatestSettledCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeStateService_GetLatestPendingCertificateHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPendingCertificateHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateServiceServer).GetLatestPendingCertificateHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeStateService_GetLatestPendingCertificateHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateServiceServer).GetLatestPendingCertificateHeader(ctx, req.(*GetLatestPendingCertificateHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeStateService_ServiceDesc is the grpc.ServiceDesc for NodeStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agglayer.node.v1.NodeStateService",
	HandlerType: (*NodeStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificateHeader",
			Handler:    _NodeStateService_GetCertificateHeader_Handler,
		},
		{
			MethodName: "GetLatestKnownCertificateHeader",
			Handler:    _NodeStateService_GetLatestKnownCertificateHeader_Handler,
		},
		{
			MethodName: "GetLatestSettledCertificateHeader",
			Handler:    _NodeStateService_GetLatestSettledCertificateHeader_Handler,
		},
		{
			MethodName: "GetLatestPendingCertificateHeader",
			Handler:    _NodeStateService_GetLatestPendingCertificateHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/agglayer_network_state_service.proto",
}
