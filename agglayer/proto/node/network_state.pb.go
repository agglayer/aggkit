// Proto definition for Agglayer Node State Service

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.3
// source: node/network_state.proto

package node

import (
	types "github.com/agglayer/aggkit/agglayer/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error kind for GetCertificateHeader RPC.
type GetCertificateHeaderErrorKind int32

const (
	// Unspecified error.
	GetCertificateHeaderErrorKind_GET_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED GetCertificateHeaderErrorKind = 0
	// Missing field.
	GetCertificateHeaderErrorKind_GET_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD GetCertificateHeaderErrorKind = 1
	// Invalid data.
	GetCertificateHeaderErrorKind_GET_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA GetCertificateHeaderErrorKind = 2
	// Certificate not found.
	GetCertificateHeaderErrorKind_GET_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND GetCertificateHeaderErrorKind = 3
)

// Enum value maps for GetCertificateHeaderErrorKind.
var (
	GetCertificateHeaderErrorKind_name = map[int32]string{
		0: "GET_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED",
		1: "GET_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD",
		2: "GET_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA",
		3: "GET_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND",
	}
	GetCertificateHeaderErrorKind_value = map[string]int32{
		"GET_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED":   0,
		"GET_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD": 1,
		"GET_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA":  2,
		"GET_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND":     3,
	}
)

func (x GetCertificateHeaderErrorKind) Enum() *GetCertificateHeaderErrorKind {
	p := new(GetCertificateHeaderErrorKind)
	*p = x
	return p
}

func (x GetCertificateHeaderErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCertificateHeaderErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_node_network_state_proto_enumTypes[0].Descriptor()
}

func (GetCertificateHeaderErrorKind) Type() protoreflect.EnumType {
	return &file_node_network_state_proto_enumTypes[0]
}

func (x GetCertificateHeaderErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCertificateHeaderErrorKind.Descriptor instead.
func (GetCertificateHeaderErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{0}
}

// Error kind for GetLatestCertificateHeader RPC.
type GetLatestCertificateHeaderErrorKind int32

const (
	// Unspecified error.
	GetLatestCertificateHeaderErrorKind_GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED GetLatestCertificateHeaderErrorKind = 0
	// Missing field.
	GetLatestCertificateHeaderErrorKind_GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD GetLatestCertificateHeaderErrorKind = 1
	// Invalid data.
	GetLatestCertificateHeaderErrorKind_GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA GetLatestCertificateHeaderErrorKind = 2
	// Certificate not found.
	GetLatestCertificateHeaderErrorKind_GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND GetLatestCertificateHeaderErrorKind = 3
)

// Enum value maps for GetLatestCertificateHeaderErrorKind.
var (
	GetLatestCertificateHeaderErrorKind_name = map[int32]string{
		0: "GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED",
		1: "GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD",
		2: "GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA",
		3: "GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND",
	}
	GetLatestCertificateHeaderErrorKind_value = map[string]int32{
		"GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_UNSPECIFIED":   0,
		"GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_MISSING_FIELD": 1,
		"GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_INVALID_DATA":  2,
		"GET_LATEST_CERTIFICATE_HEADER_ERROR_KIND_NOT_FOUND":     3,
	}
)

func (x GetLatestCertificateHeaderErrorKind) Enum() *GetLatestCertificateHeaderErrorKind {
	p := new(GetLatestCertificateHeaderErrorKind)
	*p = x
	return p
}

func (x GetLatestCertificateHeaderErrorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLatestCertificateHeaderErrorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_node_network_state_proto_enumTypes[1].Descriptor()
}

func (GetLatestCertificateHeaderErrorKind) Type() protoreflect.EnumType {
	return &file_node_network_state_proto_enumTypes[1]
}

func (x GetLatestCertificateHeaderErrorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLatestCertificateHeaderErrorKind.Descriptor instead.
func (GetLatestCertificateHeaderErrorKind) EnumDescriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{1}
}

// The type of latest certificate we want to get.
type LatestCertificateRequestType int32

const (
	// Default value
	LatestCertificateRequestType_LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED LatestCertificateRequestType = 0
	// Pending certificate.
	LatestCertificateRequestType_LATEST_CERTIFICATE_REQUEST_TYPE_PENDING LatestCertificateRequestType = 1
	// Settled certificate.
	LatestCertificateRequestType_LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED LatestCertificateRequestType = 2
)

// Enum value maps for LatestCertificateRequestType.
var (
	LatestCertificateRequestType_name = map[int32]string{
		0: "LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED",
		1: "LATEST_CERTIFICATE_REQUEST_TYPE_PENDING",
		2: "LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED",
	}
	LatestCertificateRequestType_value = map[string]int32{
		"LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED": 0,
		"LATEST_CERTIFICATE_REQUEST_TYPE_PENDING":     1,
		"LATEST_CERTIFICATE_REQUEST_TYPE_SETTLED":     2,
	}
)

func (x LatestCertificateRequestType) Enum() *LatestCertificateRequestType {
	p := new(LatestCertificateRequestType)
	*p = x
	return p
}

func (x LatestCertificateRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LatestCertificateRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_network_state_proto_enumTypes[2].Descriptor()
}

func (LatestCertificateRequestType) Type() protoreflect.EnumType {
	return &file_node_network_state_proto_enumTypes[2]
}

func (x LatestCertificateRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LatestCertificateRequestType.Descriptor instead.
func (LatestCertificateRequestType) EnumDescriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{2}
}

// Request to get a CertificateHeader for a particular CertificateId.
type GetCertificateHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The certificate identifier.
	CertificateId *types.CertificateId `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *GetCertificateHeaderRequest) Reset() {
	*x = GetCertificateHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_network_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateHeaderRequest) ProtoMessage() {}

func (x *GetCertificateHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_network_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateHeaderRequest) Descriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{0}
}

func (x *GetCertificateHeaderRequest) GetCertificateId() *types.CertificateId {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

// Response to the CertificateHeader request.
type GetCertificateHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The certificate header.
	CertificateHeader *types.CertificateHeader `protobuf:"bytes,1,opt,name=certificate_header,json=certificateHeader,proto3" json:"certificate_header,omitempty"`
}

func (x *GetCertificateHeaderResponse) Reset() {
	*x = GetCertificateHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_network_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateHeaderResponse) ProtoMessage() {}

func (x *GetCertificateHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_network_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetCertificateHeaderResponse) Descriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{1}
}

func (x *GetCertificateHeaderResponse) GetCertificateHeader() *types.CertificateHeader {
	if x != nil {
		return x.CertificateHeader
	}
	return nil
}

// Request to get the latest known/pending/settled certificate header for a network.
type GetLatestCertificateHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which type of latest certificate we want to get.
	Type LatestCertificateRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=agglayer.node.v1.LatestCertificateRequestType" json:"type,omitempty"`
	// The network identifier.
	NetworkId uint32 `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *GetLatestCertificateHeaderRequest) Reset() {
	*x = GetLatestCertificateHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_network_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCertificateHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCertificateHeaderRequest) ProtoMessage() {}

func (x *GetLatestCertificateHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_network_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCertificateHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLatestCertificateHeaderRequest) Descriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{2}
}

func (x *GetLatestCertificateHeaderRequest) GetType() LatestCertificateRequestType {
	if x != nil {
		return x.Type
	}
	return LatestCertificateRequestType_LATEST_CERTIFICATE_REQUEST_TYPE_UNSPECIFIED
}

func (x *GetLatestCertificateHeaderRequest) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

// Response to the latest known/pending/settled certificate header request.
type GetLatestCertificateHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest certificate header.
	CertificateHeader *types.CertificateHeader `protobuf:"bytes,1,opt,name=certificate_header,json=certificateHeader,proto3" json:"certificate_header,omitempty"`
}

func (x *GetLatestCertificateHeaderResponse) Reset() {
	*x = GetLatestCertificateHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_network_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCertificateHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCertificateHeaderResponse) ProtoMessage() {}

func (x *GetLatestCertificateHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_network_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCertificateHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetLatestCertificateHeaderResponse) Descriptor() ([]byte, []int) {
	return file_node_network_state_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestCertificateHeaderResponse) GetCertificateHeader() *types.CertificateHeader {
	if x != nil {
		return x.CertificateHeader
	}
	return nil
}

var File_node_network_state_proto protoreflect.FileDescriptor

var file_node_network_state_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x67, 0x67, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x82, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2a, 0xec, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x2d, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x47, 0x45, 0x54, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02,
	0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x2a, 0x8e, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x34, 0x47, 0x45, 0x54,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x36, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12,
	0x39, 0x0a, 0x35, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x47, 0x45,
	0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x03, 0x2a, 0xa9, 0x01, 0x0a, 0x1c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0x93,
	0x02, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x67,
	0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x67, 0x67,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x61, 0x67, 0x67, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x67, 0x67, 0x6b,
	0x69, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x3b, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_node_network_state_proto_rawDescOnce sync.Once
	file_node_network_state_proto_rawDescData = file_node_network_state_proto_rawDesc
)

func file_node_network_state_proto_rawDescGZIP() []byte {
	file_node_network_state_proto_rawDescOnce.Do(func() {
		file_node_network_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_network_state_proto_rawDescData)
	})
	return file_node_network_state_proto_rawDescData
}

var file_node_network_state_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_node_network_state_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_node_network_state_proto_goTypes = []interface{}{
	(GetCertificateHeaderErrorKind)(0),         // 0: agglayer.node.v1.GetCertificateHeaderErrorKind
	(GetLatestCertificateHeaderErrorKind)(0),   // 1: agglayer.node.v1.GetLatestCertificateHeaderErrorKind
	(LatestCertificateRequestType)(0),          // 2: agglayer.node.v1.LatestCertificateRequestType
	(*GetCertificateHeaderRequest)(nil),        // 3: agglayer.node.v1.GetCertificateHeaderRequest
	(*GetCertificateHeaderResponse)(nil),       // 4: agglayer.node.v1.GetCertificateHeaderResponse
	(*GetLatestCertificateHeaderRequest)(nil),  // 5: agglayer.node.v1.GetLatestCertificateHeaderRequest
	(*GetLatestCertificateHeaderResponse)(nil), // 6: agglayer.node.v1.GetLatestCertificateHeaderResponse
	(*types.CertificateId)(nil),                // 7: agglayer.protocol.types.v1.CertificateId
	(*types.CertificateHeader)(nil),            // 8: agglayer.protocol.types.v1.CertificateHeader
}
var file_node_network_state_proto_depIdxs = []int32{
	7, // 0: agglayer.node.v1.GetCertificateHeaderRequest.certificate_id:type_name -> agglayer.protocol.types.v1.CertificateId
	8, // 1: agglayer.node.v1.GetCertificateHeaderResponse.certificate_header:type_name -> agglayer.protocol.types.v1.CertificateHeader
	2, // 2: agglayer.node.v1.GetLatestCertificateHeaderRequest.type:type_name -> agglayer.node.v1.LatestCertificateRequestType
	8, // 3: agglayer.node.v1.GetLatestCertificateHeaderResponse.certificate_header:type_name -> agglayer.protocol.types.v1.CertificateHeader
	3, // 4: agglayer.node.v1.NodeStateService.GetCertificateHeader:input_type -> agglayer.node.v1.GetCertificateHeaderRequest
	5, // 5: agglayer.node.v1.NodeStateService.GetLatestCertificateHeader:input_type -> agglayer.node.v1.GetLatestCertificateHeaderRequest
	4, // 6: agglayer.node.v1.NodeStateService.GetCertificateHeader:output_type -> agglayer.node.v1.GetCertificateHeaderResponse
	6, // 7: agglayer.node.v1.NodeStateService.GetLatestCertificateHeader:output_type -> agglayer.node.v1.GetLatestCertificateHeaderResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_node_network_state_proto_init() }
func file_node_network_state_proto_init() {
	if File_node_network_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_network_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificateHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_network_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificateHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_network_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCertificateHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_network_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCertificateHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_network_state_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_network_state_proto_goTypes,
		DependencyIndexes: file_node_network_state_proto_depIdxs,
		EnumInfos:         file_node_network_state_proto_enumTypes,
		MessageInfos:      file_node_network_state_proto_msgTypes,
	}.Build()
	File_node_network_state_proto = out.File
	file_node_network_state_proto_rawDesc = nil
	file_node_network_state_proto_goTypes = nil
	file_node_network_state_proto_depIdxs = nil
}
