// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.3
// source: types/certificate.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Certificate type.
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkID of the origin network.
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Simple increment to count the Certificate per network.
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Previous local exit root.
	PrevLocalExitRoot *FixedBytes32 `protobuf:"bytes,3,opt,name=prev_local_exit_root,json=prevLocalExitRoot,proto3" json:"prev_local_exit_root,omitempty"`
	// New local exit root.
	NewLocalExitRoot *FixedBytes32 `protobuf:"bytes,4,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	// List of bridge exits included in this state transition.
	BridgeExits []*BridgeExit `protobuf:"bytes,5,rep,name=bridge_exits,json=bridgeExits,proto3" json:"bridge_exits,omitempty"`
	// List of imported bridge exits included in this state transition.
	ImportedBridgeExits []*ImportedBridgeExit `protobuf:"bytes,6,rep,name=imported_bridge_exits,json=importedBridgeExits,proto3" json:"imported_bridge_exits,omitempty"`
	// Fixed size field of arbitrary data for the chain needs.
	Metadata *FixedBytes32 `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Aggchain data.
	AggchainData *AggchainData `protobuf:"bytes,8,opt,name=aggchain_data,json=aggchainData,proto3" json:"aggchain_data,omitempty"`
	// custom chain data.
	CustomChainData []byte `protobuf:"bytes,9,opt,name=custom_chain_data,json=customChainData,proto3" json:"custom_chain_data,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_types_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *Certificate) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *Certificate) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Certificate) GetPrevLocalExitRoot() *FixedBytes32 {
	if x != nil {
		return x.PrevLocalExitRoot
	}
	return nil
}

func (x *Certificate) GetNewLocalExitRoot() *FixedBytes32 {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return nil
}

func (x *Certificate) GetBridgeExits() []*BridgeExit {
	if x != nil {
		return x.BridgeExits
	}
	return nil
}

func (x *Certificate) GetImportedBridgeExits() []*ImportedBridgeExit {
	if x != nil {
		return x.ImportedBridgeExits
	}
	return nil
}

func (x *Certificate) GetMetadata() *FixedBytes32 {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Certificate) GetAggchainData() *AggchainData {
	if x != nil {
		return x.AggchainData
	}
	return nil
}

func (x *Certificate) GetCustomChainData() []byte {
	if x != nil {
		return x.CustomChainData
	}
	return nil
}

// Aggchaindata is the data sent by the aggchain.
type AggchainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data of the aggchain.
	//
	// Types that are assignable to Data:
	//
	//	*AggchainData_Signature
	//	*AggchainData_Generic
	Data isAggchainData_Data `protobuf_oneof:"data"`
}

func (x *AggchainData) Reset() {
	*x = AggchainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggchainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggchainData) ProtoMessage() {}

func (x *AggchainData) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggchainData.ProtoReflect.Descriptor instead.
func (*AggchainData) Descriptor() ([]byte, []int) {
	return file_types_certificate_proto_rawDescGZIP(), []int{1}
}

func (m *AggchainData) GetData() isAggchainData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *AggchainData) GetSignature() *FixedBytes65 {
	if x, ok := x.GetData().(*AggchainData_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *AggchainData) GetGeneric() *AggchainProof {
	if x, ok := x.GetData().(*AggchainData_Generic); ok {
		return x.Generic
	}
	return nil
}

type isAggchainData_Data interface {
	isAggchainData_Data()
}

type AggchainData_Signature struct {
	// Signature committed to the bridge exits and imported bridge exits.
	Signature *FixedBytes65 `protobuf:"bytes,1,opt,name=signature,proto3,oneof"`
}

type AggchainData_Generic struct {
	// Generic Aggchain proof.
	Generic *AggchainProof `protobuf:"bytes,2,opt,name=generic,proto3,oneof"`
}

func (*AggchainData_Signature) isAggchainData_Data() {}

func (*AggchainData_Generic) isAggchainData_Data() {}

// Aggchain proof.
type AggchainProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggchain params.
	AggchainParams *FixedBytes32 `protobuf:"bytes,1,opt,name=aggchain_params,json=aggchainParams,proto3" json:"aggchain_params,omitempty"`
	// Aggchain proof context to share non-sensitive data.
	Context map[string][]byte `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The proof for the aggchain.
	//
	// Types that are assignable to Proof:
	//
	//	*AggchainProof_Sp1Stark
	Proof isAggchainProof_Proof `protobuf_oneof:"proof"`
}

func (x *AggchainProof) Reset() {
	*x = AggchainProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggchainProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggchainProof) ProtoMessage() {}

func (x *AggchainProof) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggchainProof.ProtoReflect.Descriptor instead.
func (*AggchainProof) Descriptor() ([]byte, []int) {
	return file_types_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *AggchainProof) GetAggchainParams() *FixedBytes32 {
	if x != nil {
		return x.AggchainParams
	}
	return nil
}

func (x *AggchainProof) GetContext() map[string][]byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *AggchainProof) GetProof() isAggchainProof_Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (x *AggchainProof) GetSp1Stark() []byte {
	if x, ok := x.GetProof().(*AggchainProof_Sp1Stark); ok {
		return x.Sp1Stark
	}
	return nil
}

type isAggchainProof_Proof interface {
	isAggchainProof_Proof()
}

type AggchainProof_Sp1Stark struct {
	// SP1 stark proof.
	Sp1Stark []byte `protobuf:"bytes,3,opt,name=sp1_stark,json=sp1Stark,proto3,oneof"`
}

func (*AggchainProof_Sp1Stark) isAggchainProof_Proof() {}

// Certificate identifier.
type CertificateId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bytes representation of the certificate id.
	Value *FixedBytes32 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CertificateId) Reset() {
	*x = CertificateId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateId) ProtoMessage() {}

func (x *CertificateId) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateId.ProtoReflect.Descriptor instead.
func (*CertificateId) Descriptor() ([]byte, []int) {
	return file_types_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateId) GetValue() *FixedBytes32 {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_types_certificate_proto protoreflect.FileDescriptor

var file_types_certificate_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x67, 0x67, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x04, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x33, 0x32, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x10, 0x6e, 0x65,
	0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x49,
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x0b, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa7,
	0x01, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x36, 0x35, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x67,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x41, 0x67, 0x67,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x67,
	0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x50, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x73, 0x70, 0x31, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x31, 0x53, 0x74, 0x61, 0x72, 0x6b, 0x1a, 0x3a,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x4f, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x67, 0x67, 0x6b,
	0x69, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_certificate_proto_rawDescOnce sync.Once
	file_types_certificate_proto_rawDescData = file_types_certificate_proto_rawDesc
)

func file_types_certificate_proto_rawDescGZIP() []byte {
	file_types_certificate_proto_rawDescOnce.Do(func() {
		file_types_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_certificate_proto_rawDescData)
	})
	return file_types_certificate_proto_rawDescData
}

var file_types_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_types_certificate_proto_goTypes = []interface{}{
	(*Certificate)(nil),        // 0: agglayer.protocol.types.v1.Certificate
	(*AggchainData)(nil),       // 1: agglayer.protocol.types.v1.AggchainData
	(*AggchainProof)(nil),      // 2: agglayer.protocol.types.v1.AggchainProof
	(*CertificateId)(nil),      // 3: agglayer.protocol.types.v1.CertificateId
	nil,                        // 4: agglayer.protocol.types.v1.AggchainProof.ContextEntry
	(*FixedBytes32)(nil),       // 5: agglayer.protocol.types.v1.FixedBytes32
	(*BridgeExit)(nil),         // 6: agglayer.protocol.types.v1.BridgeExit
	(*ImportedBridgeExit)(nil), // 7: agglayer.protocol.types.v1.ImportedBridgeExit
	(*FixedBytes65)(nil),       // 8: agglayer.protocol.types.v1.FixedBytes65
}
var file_types_certificate_proto_depIdxs = []int32{
	5,  // 0: agglayer.protocol.types.v1.Certificate.prev_local_exit_root:type_name -> agglayer.protocol.types.v1.FixedBytes32
	5,  // 1: agglayer.protocol.types.v1.Certificate.new_local_exit_root:type_name -> agglayer.protocol.types.v1.FixedBytes32
	6,  // 2: agglayer.protocol.types.v1.Certificate.bridge_exits:type_name -> agglayer.protocol.types.v1.BridgeExit
	7,  // 3: agglayer.protocol.types.v1.Certificate.imported_bridge_exits:type_name -> agglayer.protocol.types.v1.ImportedBridgeExit
	5,  // 4: agglayer.protocol.types.v1.Certificate.metadata:type_name -> agglayer.protocol.types.v1.FixedBytes32
	1,  // 5: agglayer.protocol.types.v1.Certificate.aggchain_data:type_name -> agglayer.protocol.types.v1.AggchainData
	8,  // 6: agglayer.protocol.types.v1.AggchainData.signature:type_name -> agglayer.protocol.types.v1.FixedBytes65
	2,  // 7: agglayer.protocol.types.v1.AggchainData.generic:type_name -> agglayer.protocol.types.v1.AggchainProof
	5,  // 8: agglayer.protocol.types.v1.AggchainProof.aggchain_params:type_name -> agglayer.protocol.types.v1.FixedBytes32
	4,  // 9: agglayer.protocol.types.v1.AggchainProof.context:type_name -> agglayer.protocol.types.v1.AggchainProof.ContextEntry
	5,  // 10: agglayer.protocol.types.v1.CertificateId.value:type_name -> agglayer.protocol.types.v1.FixedBytes32
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_types_certificate_proto_init() }
func file_types_certificate_proto_init() {
	if File_types_certificate_proto != nil {
		return
	}
	file_types_bytes_proto_init()
	file_types_bridge_exit_proto_init()
	file_types_imported_bridge_exit_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_certificate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_certificate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggchainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_certificate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggchainProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_certificate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_certificate_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AggchainData_Signature)(nil),
		(*AggchainData_Generic)(nil),
	}
	file_types_certificate_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AggchainProof_Sp1Stark)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_certificate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_certificate_proto_goTypes,
		DependencyIndexes: file_types_certificate_proto_depIdxs,
		MessageInfos:      file_types_certificate_proto_msgTypes,
	}.Build()
	File_types_certificate_proto = out.File
	file_types_certificate_proto_rawDesc = nil
	file_types_certificate_proto_goTypes = nil
	file_types_certificate_proto_depIdxs = nil
}
