// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.29.3
// source: types/certificate_header.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Certificate status type.
type CertificateStatus int32

const (
	// Unspecified certificate status.
	CertificateStatus_CERTIFICATE_STATUS_UNSPECIFIED CertificateStatus = 0
	// Certificate is pending.
	CertificateStatus_CERTIFICATE_STATUS_PENDING CertificateStatus = 1
	// Certificate is proven.
	CertificateStatus_CERTIFICATE_STATUS_PROVEN CertificateStatus = 2
	// Certificate is candidate.
	CertificateStatus_CERTIFICATE_STATUS_CANDIDATE CertificateStatus = 3
	// Certificate is in error.
	CertificateStatus_CERTIFICATE_STATUS_IN_ERROR CertificateStatus = 4
	// Certificate is settled.
	CertificateStatus_CERTIFICATE_STATUS_SETTLED CertificateStatus = 5
)

// Enum value maps for CertificateStatus.
var (
	CertificateStatus_name = map[int32]string{
		0: "CERTIFICATE_STATUS_UNSPECIFIED",
		1: "CERTIFICATE_STATUS_PENDING",
		2: "CERTIFICATE_STATUS_PROVEN",
		3: "CERTIFICATE_STATUS_CANDIDATE",
		4: "CERTIFICATE_STATUS_IN_ERROR",
		5: "CERTIFICATE_STATUS_SETTLED",
	}
	CertificateStatus_value = map[string]int32{
		"CERTIFICATE_STATUS_UNSPECIFIED": 0,
		"CERTIFICATE_STATUS_PENDING":     1,
		"CERTIFICATE_STATUS_PROVEN":      2,
		"CERTIFICATE_STATUS_CANDIDATE":   3,
		"CERTIFICATE_STATUS_IN_ERROR":    4,
		"CERTIFICATE_STATUS_SETTLED":     5,
	}
)

func (x CertificateStatus) Enum() *CertificateStatus {
	p := new(CertificateStatus)
	*p = x
	return p
}

func (x CertificateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_types_certificate_header_proto_enumTypes[0].Descriptor()
}

func (CertificateStatus) Type() protoreflect.EnumType {
	return &file_types_certificate_header_proto_enumTypes[0]
}

func (x CertificateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateStatus.Descriptor instead.
func (CertificateStatus) EnumDescriptor() ([]byte, []int) {
	return file_types_certificate_header_proto_rawDescGZIP(), []int{0}
}

// Certificate header type.
type CertificateHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkID for the certificate.
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Height of the certificate.
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Epoch number where the certificate was settled.
	EpochNumber *uint64 `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3,oneof" json:"epoch_number,omitempty"`
	// Certificate index in the epoch.
	CertificateIndex *uint64 `protobuf:"varint,4,opt,name=certificate_index,json=certificateIndex,proto3,oneof" json:"certificate_index,omitempty"`
	// Certificate ID.
	CertificateId *CertificateId `protobuf:"bytes,5,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// Previous local exit root.
	PrevLocalExitRoot *FixedBytes32 `protobuf:"bytes,6,opt,name=prev_local_exit_root,json=prevLocalExitRoot,proto3" json:"prev_local_exit_root,omitempty"`
	// New local exit root.
	NewLocalExitRoot *FixedBytes32 `protobuf:"bytes,7,opt,name=new_local_exit_root,json=newLocalExitRoot,proto3" json:"new_local_exit_root,omitempty"`
	// Fixed size field of arbitrary data for the chain needs.
	Metadata *FixedBytes32 `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Certificate status.
	Status CertificateStatus `protobuf:"varint,9,opt,name=status,proto3,enum=agglayer.protocol.types.v1.CertificateStatus" json:"status,omitempty"`
	// Certificate status error details.
	Error *CertificateStatusError `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
	// Settlement transaction hash.
	SettlementTxHash *FixedBytes32 `protobuf:"bytes,11,opt,name=settlement_tx_hash,json=settlementTxHash,proto3" json:"settlement_tx_hash,omitempty"`
}

func (x *CertificateHeader) Reset() {
	*x = CertificateHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateHeader) ProtoMessage() {}

func (x *CertificateHeader) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateHeader.ProtoReflect.Descriptor instead.
func (*CertificateHeader) Descriptor() ([]byte, []int) {
	return file_types_certificate_header_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateHeader) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *CertificateHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CertificateHeader) GetEpochNumber() uint64 {
	if x != nil && x.EpochNumber != nil {
		return *x.EpochNumber
	}
	return 0
}

func (x *CertificateHeader) GetCertificateIndex() uint64 {
	if x != nil && x.CertificateIndex != nil {
		return *x.CertificateIndex
	}
	return 0
}

func (x *CertificateHeader) GetCertificateId() *CertificateId {
	if x != nil {
		return x.CertificateId
	}
	return nil
}

func (x *CertificateHeader) GetPrevLocalExitRoot() *FixedBytes32 {
	if x != nil {
		return x.PrevLocalExitRoot
	}
	return nil
}

func (x *CertificateHeader) GetNewLocalExitRoot() *FixedBytes32 {
	if x != nil {
		return x.NewLocalExitRoot
	}
	return nil
}

func (x *CertificateHeader) GetMetadata() *FixedBytes32 {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CertificateHeader) GetStatus() CertificateStatus {
	if x != nil {
		return x.Status
	}
	return CertificateStatus_CERTIFICATE_STATUS_UNSPECIFIED
}

func (x *CertificateHeader) GetError() *CertificateStatusError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CertificateHeader) GetSettlementTxHash() *FixedBytes32 {
	if x != nil {
		return x.SettlementTxHash
	}
	return nil
}

// Certificate status error type.
type CertificateStatusError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message.
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CertificateStatusError) Reset() {
	*x = CertificateStatusError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_certificate_header_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateStatusError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStatusError) ProtoMessage() {}

func (x *CertificateStatusError) ProtoReflect() protoreflect.Message {
	mi := &file_types_certificate_header_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStatusError.ProtoReflect.Descriptor instead.
func (*CertificateStatusError) Descriptor() ([]byte, []int) {
	return file_types_certificate_header_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateStatusError) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_types_certificate_header_proto protoreflect.FileDescriptor

var file_types_certificate_header_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x11, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x57, 0x0a, 0x13,
	0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x33, 0x32, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33,
	0x32, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x67,
	0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x12,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x33, 0x32, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x32, 0x0a, 0x16, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a,
	0xd9, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45, 0x52,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2f, 0x61, 0x67, 0x67, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_certificate_header_proto_rawDescOnce sync.Once
	file_types_certificate_header_proto_rawDescData = file_types_certificate_header_proto_rawDesc
)

func file_types_certificate_header_proto_rawDescGZIP() []byte {
	file_types_certificate_header_proto_rawDescOnce.Do(func() {
		file_types_certificate_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_certificate_header_proto_rawDescData)
	})
	return file_types_certificate_header_proto_rawDescData
}

var file_types_certificate_header_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_certificate_header_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_types_certificate_header_proto_goTypes = []interface{}{
	(CertificateStatus)(0),         // 0: agglayer.protocol.types.v1.CertificateStatus
	(*CertificateHeader)(nil),      // 1: agglayer.protocol.types.v1.CertificateHeader
	(*CertificateStatusError)(nil), // 2: agglayer.protocol.types.v1.CertificateStatusError
	(*CertificateId)(nil),          // 3: agglayer.protocol.types.v1.CertificateId
	(*FixedBytes32)(nil),           // 4: agglayer.protocol.types.v1.FixedBytes32
}
var file_types_certificate_header_proto_depIdxs = []int32{
	3, // 0: agglayer.protocol.types.v1.CertificateHeader.certificate_id:type_name -> agglayer.protocol.types.v1.CertificateId
	4, // 1: agglayer.protocol.types.v1.CertificateHeader.prev_local_exit_root:type_name -> agglayer.protocol.types.v1.FixedBytes32
	4, // 2: agglayer.protocol.types.v1.CertificateHeader.new_local_exit_root:type_name -> agglayer.protocol.types.v1.FixedBytes32
	4, // 3: agglayer.protocol.types.v1.CertificateHeader.metadata:type_name -> agglayer.protocol.types.v1.FixedBytes32
	0, // 4: agglayer.protocol.types.v1.CertificateHeader.status:type_name -> agglayer.protocol.types.v1.CertificateStatus
	2, // 5: agglayer.protocol.types.v1.CertificateHeader.error:type_name -> agglayer.protocol.types.v1.CertificateStatusError
	4, // 6: agglayer.protocol.types.v1.CertificateHeader.settlement_tx_hash:type_name -> agglayer.protocol.types.v1.FixedBytes32
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_types_certificate_header_proto_init() }
func file_types_certificate_header_proto_init() {
	if File_types_certificate_header_proto != nil {
		return
	}
	file_types_bytes_proto_init()
	file_types_certificate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_certificate_header_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_certificate_header_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateStatusError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_certificate_header_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_certificate_header_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_certificate_header_proto_goTypes,
		DependencyIndexes: file_types_certificate_header_proto_depIdxs,
		EnumInfos:         file_types_certificate_header_proto_enumTypes,
		MessageInfos:      file_types_certificate_header_proto_msgTypes,
	}.Build()
	File_types_certificate_header_proto = out.File
	file_types_certificate_header_proto_rawDesc = nil
	file_types_certificate_header_proto_goTypes = nil
	file_types_certificate_header_proto_depIdxs = nil
}
