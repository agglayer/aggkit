// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayertypes "github.com/agglayer/aggkit/agglayer/types"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// AggSenderStorage is an autogenerated mock type for the AggSenderStorage type
type AggSenderStorage struct {
	mock.Mock
}

type AggSenderStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *AggSenderStorage) EXPECT() *AggSenderStorage_Expecter {
	return &AggSenderStorage_Expecter{mock: &_m.Mock}
}

// DeleteCertificate provides a mock function with given fields: ctx, certificateID
func (_m *AggSenderStorage) DeleteCertificate(ctx context.Context, certificateID common.Hash) error {
	ret := _m.Called(ctx, certificateID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, certificateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggSenderStorage_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type AggSenderStorage_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateID common.Hash
func (_e *AggSenderStorage_Expecter) DeleteCertificate(ctx interface{}, certificateID interface{}) *AggSenderStorage_DeleteCertificate_Call {
	return &AggSenderStorage_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate", ctx, certificateID)}
}

func (_c *AggSenderStorage_DeleteCertificate_Call) Run(run func(ctx context.Context, certificateID common.Hash)) *AggSenderStorage_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *AggSenderStorage_DeleteCertificate_Call) Return(_a0 error) *AggSenderStorage_DeleteCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggSenderStorage_DeleteCertificate_Call) RunAndReturn(run func(context.Context, common.Hash) error) *AggSenderStorage_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateAggchainProof provides a mock function with given fields: height, certificateID
func (_m *AggSenderStorage) GetCertificateAggchainProof(height uint64, certificateID common.Hash) (*types.AggchainProof, error) {
	ret := _m.Called(height, certificateID)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateAggchainProof")
	}

	var r0 *types.AggchainProof
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, common.Hash) (*types.AggchainProof, error)); ok {
		return rf(height, certificateID)
	}
	if rf, ok := ret.Get(0).(func(uint64, common.Hash) *types.AggchainProof); ok {
		r0 = rf(height, certificateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AggchainProof)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, common.Hash) error); ok {
		r1 = rf(height, certificateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetCertificateAggchainProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateAggchainProof'
type AggSenderStorage_GetCertificateAggchainProof_Call struct {
	*mock.Call
}

// GetCertificateAggchainProof is a helper method to define mock.On call
//   - height uint64
//   - certificateID common.Hash
func (_e *AggSenderStorage_Expecter) GetCertificateAggchainProof(height interface{}, certificateID interface{}) *AggSenderStorage_GetCertificateAggchainProof_Call {
	return &AggSenderStorage_GetCertificateAggchainProof_Call{Call: _e.mock.On("GetCertificateAggchainProof", height, certificateID)}
}

func (_c *AggSenderStorage_GetCertificateAggchainProof_Call) Run(run func(height uint64, certificateID common.Hash)) *AggSenderStorage_GetCertificateAggchainProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(common.Hash))
	})
	return _c
}

func (_c *AggSenderStorage_GetCertificateAggchainProof_Call) Return(_a0 *types.AggchainProof, _a1 error) *AggSenderStorage_GetCertificateAggchainProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetCertificateAggchainProof_Call) RunAndReturn(run func(uint64, common.Hash) (*types.AggchainProof, error)) *AggSenderStorage_GetCertificateAggchainProof_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateByHeight provides a mock function with given fields: height
func (_m *AggSenderStorage) GetCertificateByHeight(height uint64) (*types.Certificate, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateByHeight")
	}

	var r0 *types.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*types.Certificate, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *types.Certificate); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetCertificateByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateByHeight'
type AggSenderStorage_GetCertificateByHeight_Call struct {
	*mock.Call
}

// GetCertificateByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *AggSenderStorage_Expecter) GetCertificateByHeight(height interface{}) *AggSenderStorage_GetCertificateByHeight_Call {
	return &AggSenderStorage_GetCertificateByHeight_Call{Call: _e.mock.On("GetCertificateByHeight", height)}
}

func (_c *AggSenderStorage_GetCertificateByHeight_Call) Run(run func(height uint64)) *AggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *AggSenderStorage_GetCertificateByHeight_Call) Return(_a0 *types.Certificate, _a1 error) *AggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetCertificateByHeight_Call) RunAndReturn(run func(uint64) (*types.Certificate, error)) *AggSenderStorage_GetCertificateByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateHeaderByHeight provides a mock function with given fields: height
func (_m *AggSenderStorage) GetCertificateHeaderByHeight(height uint64) (*types.CertificateHeader, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateHeaderByHeight")
	}

	var r0 *types.CertificateHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*types.CertificateHeader, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *types.CertificateHeader); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetCertificateHeaderByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateHeaderByHeight'
type AggSenderStorage_GetCertificateHeaderByHeight_Call struct {
	*mock.Call
}

// GetCertificateHeaderByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *AggSenderStorage_Expecter) GetCertificateHeaderByHeight(height interface{}) *AggSenderStorage_GetCertificateHeaderByHeight_Call {
	return &AggSenderStorage_GetCertificateHeaderByHeight_Call{Call: _e.mock.On("GetCertificateHeaderByHeight", height)}
}

func (_c *AggSenderStorage_GetCertificateHeaderByHeight_Call) Run(run func(height uint64)) *AggSenderStorage_GetCertificateHeaderByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *AggSenderStorage_GetCertificateHeaderByHeight_Call) Return(_a0 *types.CertificateHeader, _a1 error) *AggSenderStorage_GetCertificateHeaderByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetCertificateHeaderByHeight_Call) RunAndReturn(run func(uint64) (*types.CertificateHeader, error)) *AggSenderStorage_GetCertificateHeaderByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateHeadersByStatus provides a mock function with given fields: status
func (_m *AggSenderStorage) GetCertificateHeadersByStatus(status []agglayertypes.CertificateStatus) ([]*types.CertificateHeader, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateHeadersByStatus")
	}

	var r0 []*types.CertificateHeader
	var r1 error
	if rf, ok := ret.Get(0).(func([]agglayertypes.CertificateStatus) ([]*types.CertificateHeader, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func([]agglayertypes.CertificateStatus) []*types.CertificateHeader); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.CertificateHeader)
		}
	}

	if rf, ok := ret.Get(1).(func([]agglayertypes.CertificateStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetCertificateHeadersByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateHeadersByStatus'
type AggSenderStorage_GetCertificateHeadersByStatus_Call struct {
	*mock.Call
}

// GetCertificateHeadersByStatus is a helper method to define mock.On call
//   - status []agglayertypes.CertificateStatus
func (_e *AggSenderStorage_Expecter) GetCertificateHeadersByStatus(status interface{}) *AggSenderStorage_GetCertificateHeadersByStatus_Call {
	return &AggSenderStorage_GetCertificateHeadersByStatus_Call{Call: _e.mock.On("GetCertificateHeadersByStatus", status)}
}

func (_c *AggSenderStorage_GetCertificateHeadersByStatus_Call) Run(run func(status []agglayertypes.CertificateStatus)) *AggSenderStorage_GetCertificateHeadersByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]agglayertypes.CertificateStatus))
	})
	return _c
}

func (_c *AggSenderStorage_GetCertificateHeadersByStatus_Call) Return(_a0 []*types.CertificateHeader, _a1 error) *AggSenderStorage_GetCertificateHeadersByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetCertificateHeadersByStatus_Call) RunAndReturn(run func([]agglayertypes.CertificateStatus) ([]*types.CertificateHeader, error)) *AggSenderStorage_GetCertificateHeadersByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSentCertificate provides a mock function with no fields
func (_m *AggSenderStorage) GetLastSentCertificate() (*types.Certificate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastSentCertificate")
	}

	var r0 *types.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Certificate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetLastSentCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSentCertificate'
type AggSenderStorage_GetLastSentCertificate_Call struct {
	*mock.Call
}

// GetLastSentCertificate is a helper method to define mock.On call
func (_e *AggSenderStorage_Expecter) GetLastSentCertificate() *AggSenderStorage_GetLastSentCertificate_Call {
	return &AggSenderStorage_GetLastSentCertificate_Call{Call: _e.mock.On("GetLastSentCertificate")}
}

func (_c *AggSenderStorage_GetLastSentCertificate_Call) Run(run func()) *AggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AggSenderStorage_GetLastSentCertificate_Call) Return(_a0 *types.Certificate, _a1 error) *AggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetLastSentCertificate_Call) RunAndReturn(run func() (*types.Certificate, error)) *AggSenderStorage_GetLastSentCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastSentCertificateHeader provides a mock function with no fields
func (_m *AggSenderStorage) GetLastSentCertificateHeader() (*types.CertificateHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastSentCertificateHeader")
	}

	var r0 *types.CertificateHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.CertificateHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.CertificateHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateHeader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggSenderStorage_GetLastSentCertificateHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSentCertificateHeader'
type AggSenderStorage_GetLastSentCertificateHeader_Call struct {
	*mock.Call
}

// GetLastSentCertificateHeader is a helper method to define mock.On call
func (_e *AggSenderStorage_Expecter) GetLastSentCertificateHeader() *AggSenderStorage_GetLastSentCertificateHeader_Call {
	return &AggSenderStorage_GetLastSentCertificateHeader_Call{Call: _e.mock.On("GetLastSentCertificateHeader")}
}

func (_c *AggSenderStorage_GetLastSentCertificateHeader_Call) Run(run func()) *AggSenderStorage_GetLastSentCertificateHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AggSenderStorage_GetLastSentCertificateHeader_Call) Return(_a0 *types.CertificateHeader, _a1 error) *AggSenderStorage_GetLastSentCertificateHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggSenderStorage_GetLastSentCertificateHeader_Call) RunAndReturn(run func() (*types.CertificateHeader, error)) *AggSenderStorage_GetLastSentCertificateHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLastSentCertificate provides a mock function with given fields: ctx, certificate
func (_m *AggSenderStorage) SaveLastSentCertificate(ctx context.Context, certificate types.Certificate) error {
	ret := _m.Called(ctx, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SaveLastSentCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Certificate) error); ok {
		r0 = rf(ctx, certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggSenderStorage_SaveLastSentCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLastSentCertificate'
type AggSenderStorage_SaveLastSentCertificate_Call struct {
	*mock.Call
}

// SaveLastSentCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificate types.Certificate
func (_e *AggSenderStorage_Expecter) SaveLastSentCertificate(ctx interface{}, certificate interface{}) *AggSenderStorage_SaveLastSentCertificate_Call {
	return &AggSenderStorage_SaveLastSentCertificate_Call{Call: _e.mock.On("SaveLastSentCertificate", ctx, certificate)}
}

func (_c *AggSenderStorage_SaveLastSentCertificate_Call) Run(run func(ctx context.Context, certificate types.Certificate)) *AggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Certificate))
	})
	return _c
}

func (_c *AggSenderStorage_SaveLastSentCertificate_Call) Return(_a0 error) *AggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggSenderStorage_SaveLastSentCertificate_Call) RunAndReturn(run func(context.Context, types.Certificate) error) *AggSenderStorage_SaveLastSentCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCertificateStatus provides a mock function with given fields: ctx, certificateID, newStatus, updatedAt
func (_m *AggSenderStorage) UpdateCertificateStatus(ctx context.Context, certificateID common.Hash, newStatus agglayertypes.CertificateStatus, updatedAt uint32) error {
	ret := _m.Called(ctx, certificateID, newStatus, updatedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, agglayertypes.CertificateStatus, uint32) error); ok {
		r0 = rf(ctx, certificateID, newStatus, updatedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggSenderStorage_UpdateCertificateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCertificateStatus'
type AggSenderStorage_UpdateCertificateStatus_Call struct {
	*mock.Call
}

// UpdateCertificateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateID common.Hash
//   - newStatus agglayertypes.CertificateStatus
//   - updatedAt uint32
func (_e *AggSenderStorage_Expecter) UpdateCertificateStatus(ctx interface{}, certificateID interface{}, newStatus interface{}, updatedAt interface{}) *AggSenderStorage_UpdateCertificateStatus_Call {
	return &AggSenderStorage_UpdateCertificateStatus_Call{Call: _e.mock.On("UpdateCertificateStatus", ctx, certificateID, newStatus, updatedAt)}
}

func (_c *AggSenderStorage_UpdateCertificateStatus_Call) Run(run func(ctx context.Context, certificateID common.Hash, newStatus agglayertypes.CertificateStatus, updatedAt uint32)) *AggSenderStorage_UpdateCertificateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash), args[2].(agglayertypes.CertificateStatus), args[3].(uint32))
	})
	return _c
}

func (_c *AggSenderStorage_UpdateCertificateStatus_Call) Return(_a0 error) *AggSenderStorage_UpdateCertificateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggSenderStorage_UpdateCertificateStatus_Call) RunAndReturn(run func(context.Context, common.Hash, agglayertypes.CertificateStatus, uint32) error) *AggSenderStorage_UpdateCertificateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggSenderStorage creates a new instance of AggSenderStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggSenderStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggSenderStorage {
	mock := &AggSenderStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
