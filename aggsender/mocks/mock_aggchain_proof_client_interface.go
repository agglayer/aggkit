// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	aggsendertypes "github.com/agglayer/aggkit/aggsender/types"
	common "github.com/ethereum/go-ethereum/common"

	l1infotreesync "github.com/agglayer/aggkit/l1infotreesync"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/agglayer/types"
)

// AggchainProofClientInterface is an autogenerated mock type for the AggchainProofClientInterface type
type AggchainProofClientInterface struct {
	mock.Mock
}

type AggchainProofClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AggchainProofClientInterface) EXPECT() *AggchainProofClientInterface_Expecter {
	return &AggchainProofClientInterface_Expecter{mock: &_m.Mock}
}

// GenerateAggchainProof provides a mock function with given fields: lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber
func (_m *AggchainProofClientInterface) GenerateAggchainProof(lastProvenBlock uint64, requestedEndBlock uint64, l1InfoTreeRootHash common.Hash, l1InfoTreeLeaf l1infotreesync.L1InfoTreeLeaf, l1InfoTreeMerkleProof types.MerkleProof, gerLeavesWithBlockNumber map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, importedBridgeExitsWithBlockNumber []*types.ImportedBridgeExitWithBlockNumber) (*aggsendertypes.AggchainProof, error) {
	ret := _m.Called(lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAggchainProof")
	}

	var r0 *aggsendertypes.AggchainProof
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash, l1infotreesync.L1InfoTreeLeaf, types.MerkleProof, map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, []*types.ImportedBridgeExitWithBlockNumber) (*aggsendertypes.AggchainProof, error)); ok {
		return rf(lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash, l1infotreesync.L1InfoTreeLeaf, types.MerkleProof, map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, []*types.ImportedBridgeExitWithBlockNumber) *aggsendertypes.AggchainProof); ok {
		r0 = rf(lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggsendertypes.AggchainProof)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, common.Hash, l1infotreesync.L1InfoTreeLeaf, types.MerkleProof, map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, []*types.ImportedBridgeExitWithBlockNumber) error); ok {
		r1 = rf(lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofClientInterface_GenerateAggchainProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAggchainProof'
type AggchainProofClientInterface_GenerateAggchainProof_Call struct {
	*mock.Call
}

// GenerateAggchainProof is a helper method to define mock.On call
//   - lastProvenBlock uint64
//   - requestedEndBlock uint64
//   - l1InfoTreeRootHash common.Hash
//   - l1InfoTreeLeaf l1infotreesync.L1InfoTreeLeaf
//   - l1InfoTreeMerkleProof types.MerkleProof
//   - gerLeavesWithBlockNumber map[common.Hash]*types.ProvenInsertedGERWithBlockNumber
//   - importedBridgeExitsWithBlockNumber []*types.ImportedBridgeExitWithBlockNumber
func (_e *AggchainProofClientInterface_Expecter) GenerateAggchainProof(lastProvenBlock interface{}, requestedEndBlock interface{}, l1InfoTreeRootHash interface{}, l1InfoTreeLeaf interface{}, l1InfoTreeMerkleProof interface{}, gerLeavesWithBlockNumber interface{}, importedBridgeExitsWithBlockNumber interface{}) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	return &AggchainProofClientInterface_GenerateAggchainProof_Call{Call: _e.mock.On("GenerateAggchainProof", lastProvenBlock, requestedEndBlock, l1InfoTreeRootHash, l1InfoTreeLeaf, l1InfoTreeMerkleProof, gerLeavesWithBlockNumber, importedBridgeExitsWithBlockNumber)}
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) Run(run func(lastProvenBlock uint64, requestedEndBlock uint64, l1InfoTreeRootHash common.Hash, l1InfoTreeLeaf l1infotreesync.L1InfoTreeLeaf, l1InfoTreeMerkleProof types.MerkleProof, gerLeavesWithBlockNumber map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, importedBridgeExitsWithBlockNumber []*types.ImportedBridgeExitWithBlockNumber)) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(common.Hash), args[3].(l1infotreesync.L1InfoTreeLeaf), args[4].(types.MerkleProof), args[5].(map[common.Hash]*types.ProvenInsertedGERWithBlockNumber), args[6].([]*types.ImportedBridgeExitWithBlockNumber))
	})
	return _c
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) Return(_a0 *aggsendertypes.AggchainProof, _a1 error) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) RunAndReturn(run func(uint64, uint64, common.Hash, l1infotreesync.L1InfoTreeLeaf, types.MerkleProof, map[common.Hash]*types.ProvenInsertedGERWithBlockNumber, []*types.ImportedBridgeExitWithBlockNumber) (*aggsendertypes.AggchainProof, error)) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggchainProofClientInterface creates a new instance of AggchainProofClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggchainProofClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggchainProofClientInterface {
	mock := &AggchainProofClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
