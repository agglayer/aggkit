// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/agglayer/aggkit/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// AggchainProofClientInterface is an autogenerated mock type for the AggchainProofClientInterface type
type AggchainProofClientInterface struct {
	mock.Mock
}

type AggchainProofClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AggchainProofClientInterface) EXPECT() *AggchainProofClientInterface_Expecter {
	return &AggchainProofClientInterface_Expecter{mock: &_m.Mock}
}

// GenerateAggchainProof provides a mock function with given fields: req
func (_m *AggchainProofClientInterface) GenerateAggchainProof(req *types.AggchainProofRequest) (*types.AggchainProof, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAggchainProof")
	}

	var r0 *types.AggchainProof
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.AggchainProofRequest) (*types.AggchainProof, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*types.AggchainProofRequest) *types.AggchainProof); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AggchainProof)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.AggchainProofRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofClientInterface_GenerateAggchainProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAggchainProof'
type AggchainProofClientInterface_GenerateAggchainProof_Call struct {
	*mock.Call
}

// GenerateAggchainProof is a helper method to define mock.On call
//   - req *types.AggchainProofRequest
func (_e *AggchainProofClientInterface_Expecter) GenerateAggchainProof(req interface{}) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	return &AggchainProofClientInterface_GenerateAggchainProof_Call{Call: _e.mock.On("GenerateAggchainProof", req)}
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) Run(run func(req *types.AggchainProofRequest)) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.AggchainProofRequest))
	})
	return _c
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) Return(_a0 *types.AggchainProof, _a1 error) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofClientInterface_GenerateAggchainProof_Call) RunAndReturn(run func(*types.AggchainProofRequest) (*types.AggchainProof, error)) *AggchainProofClientInterface_GenerateAggchainProof_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOptimisticAggchainProof provides a mock function with given fields: req, signature
func (_m *AggchainProofClientInterface) GenerateOptimisticAggchainProof(req *types.AggchainProofRequest, signature []byte) (*types.AggchainProof, error) {
	ret := _m.Called(req, signature)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOptimisticAggchainProof")
	}

	var r0 *types.AggchainProof
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.AggchainProofRequest, []byte) (*types.AggchainProof, error)); ok {
		return rf(req, signature)
	}
	if rf, ok := ret.Get(0).(func(*types.AggchainProofRequest, []byte) *types.AggchainProof); ok {
		r0 = rf(req, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AggchainProof)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.AggchainProofRequest, []byte) error); ok {
		r1 = rf(req, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOptimisticAggchainProof'
type AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call struct {
	*mock.Call
}

// GenerateOptimisticAggchainProof is a helper method to define mock.On call
//   - req *types.AggchainProofRequest
//   - signature []byte
func (_e *AggchainProofClientInterface_Expecter) GenerateOptimisticAggchainProof(req interface{}, signature interface{}) *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call {
	return &AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call{Call: _e.mock.On("GenerateOptimisticAggchainProof", req, signature)}
}

func (_c *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call) Run(run func(req *types.AggchainProofRequest, signature []byte)) *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.AggchainProofRequest), args[1].([]byte))
	})
	return _c
}

func (_c *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call) Return(_a0 *types.AggchainProof, _a1 error) *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call) RunAndReturn(run func(*types.AggchainProofRequest, []byte) (*types.AggchainProof, error)) *AggchainProofClientInterface_GenerateOptimisticAggchainProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggchainProofClientInterface creates a new instance of AggchainProofClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggchainProofClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggchainProofClientInterface {
	mock := &AggchainProofClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
