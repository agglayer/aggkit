// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayertypes "github.com/agglayer/aggkit/agglayer/types"
	aggsendertypes "github.com/agglayer/aggkit/aggsender/types"

	bridgesync "github.com/agglayer/aggkit/bridgesync"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	l1infotreesync "github.com/agglayer/aggkit/l1infotreesync"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/tree/types"
)

// AggchainProofFlow is an autogenerated mock type for the AggchainProofFlow type
type AggchainProofFlow struct {
	mock.Mock
}

type AggchainProofFlow_Expecter struct {
	mock *mock.Mock
}

func (_m *AggchainProofFlow) EXPECT() *AggchainProofFlow_Expecter {
	return &AggchainProofFlow_Expecter{mock: &_m.Mock}
}

// CheckIfClaimsArePartOfFinalizedL1InfoTree provides a mock function with given fields: finalizedL1InfoTreeRoot, claims
func (_m *AggchainProofFlow) CheckIfClaimsArePartOfFinalizedL1InfoTree(finalizedL1InfoTreeRoot *types.Root, claims []bridgesync.Claim) error {
	ret := _m.Called(finalizedL1InfoTreeRoot, claims)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfClaimsArePartOfFinalizedL1InfoTree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Root, []bridgesync.Claim) error); ok {
		r0 = rf(finalizedL1InfoTreeRoot, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfClaimsArePartOfFinalizedL1InfoTree'
type AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call struct {
	*mock.Call
}

// CheckIfClaimsArePartOfFinalizedL1InfoTree is a helper method to define mock.On call
//   - finalizedL1InfoTreeRoot *types.Root
//   - claims []bridgesync.Claim
func (_e *AggchainProofFlow_Expecter) CheckIfClaimsArePartOfFinalizedL1InfoTree(finalizedL1InfoTreeRoot interface{}, claims interface{}) *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call {
	return &AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call{Call: _e.mock.On("CheckIfClaimsArePartOfFinalizedL1InfoTree", finalizedL1InfoTreeRoot, claims)}
}

func (_c *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call) Run(run func(finalizedL1InfoTreeRoot *types.Root, claims []bridgesync.Claim)) *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Root), args[1].([]bridgesync.Claim))
	})
	return _c
}

func (_c *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call) Return(_a0 error) *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call) RunAndReturn(run func(*types.Root, []bridgesync.Claim) error) *AggchainProofFlow_CheckIfClaimsArePartOfFinalizedL1InfoTree_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateBuildParams provides a mock function with given fields: ctx
func (_m *AggchainProofFlow) GetCertificateBuildParams(ctx context.Context) (*aggsendertypes.CertificateBuildParams, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateBuildParams")
	}

	var r0 *aggsendertypes.CertificateBuildParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*aggsendertypes.CertificateBuildParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *aggsendertypes.CertificateBuildParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggsendertypes.CertificateBuildParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofFlow_GetCertificateBuildParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateBuildParams'
type AggchainProofFlow_GetCertificateBuildParams_Call struct {
	*mock.Call
}

// GetCertificateBuildParams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AggchainProofFlow_Expecter) GetCertificateBuildParams(ctx interface{}) *AggchainProofFlow_GetCertificateBuildParams_Call {
	return &AggchainProofFlow_GetCertificateBuildParams_Call{Call: _e.mock.On("GetCertificateBuildParams", ctx)}
}

func (_c *AggchainProofFlow_GetCertificateBuildParams_Call) Run(run func(ctx context.Context)) *AggchainProofFlow_GetCertificateBuildParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AggchainProofFlow_GetCertificateBuildParams_Call) Return(_a0 *aggsendertypes.CertificateBuildParams, _a1 error) *AggchainProofFlow_GetCertificateBuildParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofFlow_GetCertificateBuildParams_Call) RunAndReturn(run func(context.Context) (*aggsendertypes.CertificateBuildParams, error)) *AggchainProofFlow_GetCertificateBuildParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetFinalizedL1InfoTreeData provides a mock function with given fields: ctx
func (_m *AggchainProofFlow) GetFinalizedL1InfoTreeData(ctx context.Context) (types.Proof, *l1infotreesync.L1InfoTreeLeaf, *types.Root, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFinalizedL1InfoTreeData")
	}

	var r0 types.Proof
	var r1 *l1infotreesync.L1InfoTreeLeaf
	var r2 *types.Root
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Proof, *l1infotreesync.L1InfoTreeLeaf, *types.Root, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Proof); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *l1infotreesync.L1InfoTreeLeaf); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*l1infotreesync.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) *types.Root); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*types.Root)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// AggchainProofFlow_GetFinalizedL1InfoTreeData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFinalizedL1InfoTreeData'
type AggchainProofFlow_GetFinalizedL1InfoTreeData_Call struct {
	*mock.Call
}

// GetFinalizedL1InfoTreeData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AggchainProofFlow_Expecter) GetFinalizedL1InfoTreeData(ctx interface{}) *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call {
	return &AggchainProofFlow_GetFinalizedL1InfoTreeData_Call{Call: _e.mock.On("GetFinalizedL1InfoTreeData", ctx)}
}

func (_c *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call) Run(run func(ctx context.Context)) *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call) Return(_a0 types.Proof, _a1 *l1infotreesync.L1InfoTreeLeaf, _a2 *types.Root, _a3 error) *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call) RunAndReturn(run func(context.Context) (types.Proof, *l1infotreesync.L1InfoTreeLeaf, *types.Root, error)) *AggchainProofFlow_GetFinalizedL1InfoTreeData_Call {
	_c.Call.Return(run)
	return _c
}

// GetImportedBridgeExitsForProver provides a mock function with given fields: claims
func (_m *AggchainProofFlow) GetImportedBridgeExitsForProver(claims []bridgesync.Claim) ([]*agglayertypes.ImportedBridgeExitWithBlockNumber, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GetImportedBridgeExitsForProver")
	}

	var r0 []*agglayertypes.ImportedBridgeExitWithBlockNumber
	var r1 error
	if rf, ok := ret.Get(0).(func([]bridgesync.Claim) ([]*agglayertypes.ImportedBridgeExitWithBlockNumber, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func([]bridgesync.Claim) []*agglayertypes.ImportedBridgeExitWithBlockNumber); ok {
		r0 = rf(claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*agglayertypes.ImportedBridgeExitWithBlockNumber)
		}
	}

	if rf, ok := ret.Get(1).(func([]bridgesync.Claim) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofFlow_GetImportedBridgeExitsForProver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImportedBridgeExitsForProver'
type AggchainProofFlow_GetImportedBridgeExitsForProver_Call struct {
	*mock.Call
}

// GetImportedBridgeExitsForProver is a helper method to define mock.On call
//   - claims []bridgesync.Claim
func (_e *AggchainProofFlow_Expecter) GetImportedBridgeExitsForProver(claims interface{}) *AggchainProofFlow_GetImportedBridgeExitsForProver_Call {
	return &AggchainProofFlow_GetImportedBridgeExitsForProver_Call{Call: _e.mock.On("GetImportedBridgeExitsForProver", claims)}
}

func (_c *AggchainProofFlow_GetImportedBridgeExitsForProver_Call) Run(run func(claims []bridgesync.Claim)) *AggchainProofFlow_GetImportedBridgeExitsForProver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]bridgesync.Claim))
	})
	return _c
}

func (_c *AggchainProofFlow_GetImportedBridgeExitsForProver_Call) Return(_a0 []*agglayertypes.ImportedBridgeExitWithBlockNumber, _a1 error) *AggchainProofFlow_GetImportedBridgeExitsForProver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofFlow_GetImportedBridgeExitsForProver_Call) RunAndReturn(run func([]bridgesync.Claim) ([]*agglayertypes.ImportedBridgeExitWithBlockNumber, error)) *AggchainProofFlow_GetImportedBridgeExitsForProver_Call {
	_c.Call.Return(run)
	return _c
}

// GetInjectedGERsProofs provides a mock function with given fields: ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock
func (_m *AggchainProofFlow) GetInjectedGERsProofs(ctx context.Context, finalizedL1InfoTreeRoot *types.Root, fromBlock uint64, toBlock uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error) {
	ret := _m.Called(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetInjectedGERsProofs")
	}

	var r0 map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Root, uint64, uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error)); ok {
		return rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Root, uint64, uint64) map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber); ok {
		r0 = rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Root, uint64, uint64) error); ok {
		r1 = rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggchainProofFlow_GetInjectedGERsProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInjectedGERsProofs'
type AggchainProofFlow_GetInjectedGERsProofs_Call struct {
	*mock.Call
}

// GetInjectedGERsProofs is a helper method to define mock.On call
//   - ctx context.Context
//   - finalizedL1InfoTreeRoot *types.Root
//   - fromBlock uint64
//   - toBlock uint64
func (_e *AggchainProofFlow_Expecter) GetInjectedGERsProofs(ctx interface{}, finalizedL1InfoTreeRoot interface{}, fromBlock interface{}, toBlock interface{}) *AggchainProofFlow_GetInjectedGERsProofs_Call {
	return &AggchainProofFlow_GetInjectedGERsProofs_Call{Call: _e.mock.On("GetInjectedGERsProofs", ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)}
}

func (_c *AggchainProofFlow_GetInjectedGERsProofs_Call) Run(run func(ctx context.Context, finalizedL1InfoTreeRoot *types.Root, fromBlock uint64, toBlock uint64)) *AggchainProofFlow_GetInjectedGERsProofs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Root), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *AggchainProofFlow_GetInjectedGERsProofs_Call) Return(_a0 map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, _a1 error) *AggchainProofFlow_GetInjectedGERsProofs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggchainProofFlow_GetInjectedGERsProofs_Call) RunAndReturn(run func(context.Context, *types.Root, uint64, uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error)) *AggchainProofFlow_GetInjectedGERsProofs_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggchainProofFlow creates a new instance of AggchainProofFlow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggchainProofFlow(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggchainProofFlow {
	mock := &AggchainProofFlow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
