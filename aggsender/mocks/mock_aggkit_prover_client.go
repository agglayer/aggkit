// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/agglayer/aggkit/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// AggkitProverClient is an autogenerated mock type for the AggkitProverClient type
type AggkitProverClient struct {
	mock.Mock
}

type AggkitProverClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AggkitProverClient) EXPECT() *AggkitProverClient_Expecter {
	return &AggkitProverClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *AggkitProverClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggkitProverClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type AggkitProverClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *AggkitProverClient_Expecter) Close() *AggkitProverClient_Close_Call {
	return &AggkitProverClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *AggkitProverClient_Close_Call) Run(run func()) *AggkitProverClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AggkitProverClient_Close_Call) Return(_a0 error) *AggkitProverClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggkitProverClient_Close_Call) RunAndReturn(run func() error) *AggkitProverClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAuthProof provides a mock function with given fields: startBlock, maxEndBlock
func (_m *AggkitProverClient) FetchAuthProof(startBlock uint64, maxEndBlock uint64) (*types.AuthProof, error) {
	ret := _m.Called(startBlock, maxEndBlock)

	if len(ret) == 0 {
		panic("no return value specified for FetchAuthProof")
	}

	var r0 *types.AuthProof
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (*types.AuthProof, error)); ok {
		return rf(startBlock, maxEndBlock)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) *types.AuthProof); ok {
		r0 = rf(startBlock, maxEndBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AuthProof)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(startBlock, maxEndBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggkitProverClient_FetchAuthProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAuthProof'
type AggkitProverClient_FetchAuthProof_Call struct {
	*mock.Call
}

// FetchAuthProof is a helper method to define mock.On call
//   - startBlock uint64
//   - maxEndBlock uint64
func (_e *AggkitProverClient_Expecter) FetchAuthProof(startBlock interface{}, maxEndBlock interface{}) *AggkitProverClient_FetchAuthProof_Call {
	return &AggkitProverClient_FetchAuthProof_Call{Call: _e.mock.On("FetchAuthProof", startBlock, maxEndBlock)}
}

func (_c *AggkitProverClient_FetchAuthProof_Call) Run(run func(startBlock uint64, maxEndBlock uint64)) *AggkitProverClient_FetchAuthProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *AggkitProverClient_FetchAuthProof_Call) Return(_a0 *types.AuthProof, _a1 error) *AggkitProverClient_FetchAuthProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggkitProverClient_FetchAuthProof_Call) RunAndReturn(run func(uint64, uint64) (*types.AuthProof, error)) *AggkitProverClient_FetchAuthProof_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggkitProverClient creates a new instance of AggkitProverClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggkitProverClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggkitProverClient {
	mock := &AggkitProverClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
