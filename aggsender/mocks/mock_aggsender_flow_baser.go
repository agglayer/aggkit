// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayertypes "github.com/agglayer/aggkit/agglayer/types"
	bridgesync "github.com/agglayer/aggkit/bridgesync"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// AggsenderFlowBaser is an autogenerated mock type for the AggsenderFlowBaser type
type AggsenderFlowBaser struct {
	mock.Mock
}

type AggsenderFlowBaser_Expecter struct {
	mock *mock.Mock
}

func (_m *AggsenderFlowBaser) EXPECT() *AggsenderFlowBaser_Expecter {
	return &AggsenderFlowBaser_Expecter{mock: &_m.Mock}
}

// BuildCertificate provides a mock function with given fields: ctx, certParams, lastSentCertificate, allowEmptyCert
func (_m *AggsenderFlowBaser) BuildCertificate(ctx context.Context, certParams *types.CertificateBuildParams, lastSentCertificate *types.CertificateHeader, allowEmptyCert bool) (*agglayertypes.Certificate, error) {
	ret := _m.Called(ctx, certParams, lastSentCertificate, allowEmptyCert)

	if len(ret) == 0 {
		panic("no return value specified for BuildCertificate")
	}

	var r0 *agglayertypes.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) (*agglayertypes.Certificate, error)); ok {
		return rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) *agglayertypes.Certificate); ok {
		r0 = rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agglayertypes.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) error); ok {
		r1 = rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggsenderFlowBaser_BuildCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCertificate'
type AggsenderFlowBaser_BuildCertificate_Call struct {
	*mock.Call
}

// BuildCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certParams *types.CertificateBuildParams
//   - lastSentCertificate *types.CertificateHeader
//   - allowEmptyCert bool
func (_e *AggsenderFlowBaser_Expecter) BuildCertificate(ctx interface{}, certParams interface{}, lastSentCertificate interface{}, allowEmptyCert interface{}) *AggsenderFlowBaser_BuildCertificate_Call {
	return &AggsenderFlowBaser_BuildCertificate_Call{Call: _e.mock.On("BuildCertificate", ctx, certParams, lastSentCertificate, allowEmptyCert)}
}

func (_c *AggsenderFlowBaser_BuildCertificate_Call) Run(run func(ctx context.Context, certParams *types.CertificateBuildParams, lastSentCertificate *types.CertificateHeader, allowEmptyCert bool)) *AggsenderFlowBaser_BuildCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams), args[2].(*types.CertificateHeader), args[3].(bool))
	})
	return _c
}

func (_c *AggsenderFlowBaser_BuildCertificate_Call) Return(_a0 *agglayertypes.Certificate, _a1 error) *AggsenderFlowBaser_BuildCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggsenderFlowBaser_BuildCertificate_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) (*agglayertypes.Certificate, error)) *AggsenderFlowBaser_BuildCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertClaimToImportedBridgeExit provides a mock function with given fields: claim
func (_m *AggsenderFlowBaser) ConvertClaimToImportedBridgeExit(claim bridgesync.Claim) (*agglayertypes.ImportedBridgeExit, error) {
	ret := _m.Called(claim)

	if len(ret) == 0 {
		panic("no return value specified for ConvertClaimToImportedBridgeExit")
	}

	var r0 *agglayertypes.ImportedBridgeExit
	var r1 error
	if rf, ok := ret.Get(0).(func(bridgesync.Claim) (*agglayertypes.ImportedBridgeExit, error)); ok {
		return rf(claim)
	}
	if rf, ok := ret.Get(0).(func(bridgesync.Claim) *agglayertypes.ImportedBridgeExit); ok {
		r0 = rf(claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agglayertypes.ImportedBridgeExit)
		}
	}

	if rf, ok := ret.Get(1).(func(bridgesync.Claim) error); ok {
		r1 = rf(claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertClaimToImportedBridgeExit'
type AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call struct {
	*mock.Call
}

// ConvertClaimToImportedBridgeExit is a helper method to define mock.On call
//   - claim bridgesync.Claim
func (_e *AggsenderFlowBaser_Expecter) ConvertClaimToImportedBridgeExit(claim interface{}) *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call {
	return &AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call{Call: _e.mock.On("ConvertClaimToImportedBridgeExit", claim)}
}

func (_c *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call) Run(run func(claim bridgesync.Claim)) *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bridgesync.Claim))
	})
	return _c
}

func (_c *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call) Return(_a0 *agglayertypes.ImportedBridgeExit, _a1 error) *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call) RunAndReturn(run func(bridgesync.Claim) (*agglayertypes.ImportedBridgeExit, error)) *AggsenderFlowBaser_ConvertClaimToImportedBridgeExit_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateBuildParamsInternal provides a mock function with given fields: ctx, certType
func (_m *AggsenderFlowBaser) GetCertificateBuildParamsInternal(ctx context.Context, certType types.CertificateType) (*types.CertificateBuildParams, error) {
	ret := _m.Called(ctx, certType)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateBuildParamsInternal")
	}

	var r0 *types.CertificateBuildParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CertificateType) (*types.CertificateBuildParams, error)); ok {
		return rf(ctx, certType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CertificateType) *types.CertificateBuildParams); ok {
		r0 = rf(ctx, certType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateBuildParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CertificateType) error); ok {
		r1 = rf(ctx, certType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateBuildParamsInternal'
type AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call struct {
	*mock.Call
}

// GetCertificateBuildParamsInternal is a helper method to define mock.On call
//   - ctx context.Context
//   - certType types.CertificateType
func (_e *AggsenderFlowBaser_Expecter) GetCertificateBuildParamsInternal(ctx interface{}, certType interface{}) *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call {
	return &AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call{Call: _e.mock.On("GetCertificateBuildParamsInternal", ctx, certType)}
}

func (_c *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call) Run(run func(ctx context.Context, certType types.CertificateType)) *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CertificateType))
	})
	return _c
}

func (_c *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call) Return(_a0 *types.CertificateBuildParams, _a1 error) *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call) RunAndReturn(run func(context.Context, types.CertificateType) (*types.CertificateBuildParams, error)) *AggsenderFlowBaser_GetCertificateBuildParamsInternal_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewLocalExitRoot provides a mock function with given fields: ctx, certParams
func (_m *AggsenderFlowBaser) GetNewLocalExitRoot(ctx context.Context, certParams *types.CertificateBuildParams) (common.Hash, error) {
	ret := _m.Called(ctx, certParams)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLocalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) (common.Hash, error)); ok {
		return rf(ctx, certParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) common.Hash); ok {
		r0 = rf(ctx, certParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams) error); ok {
		r1 = rf(ctx, certParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AggsenderFlowBaser_GetNewLocalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLocalExitRoot'
type AggsenderFlowBaser_GetNewLocalExitRoot_Call struct {
	*mock.Call
}

// GetNewLocalExitRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - certParams *types.CertificateBuildParams
func (_e *AggsenderFlowBaser_Expecter) GetNewLocalExitRoot(ctx interface{}, certParams interface{}) *AggsenderFlowBaser_GetNewLocalExitRoot_Call {
	return &AggsenderFlowBaser_GetNewLocalExitRoot_Call{Call: _e.mock.On("GetNewLocalExitRoot", ctx, certParams)}
}

func (_c *AggsenderFlowBaser_GetNewLocalExitRoot_Call) Run(run func(ctx context.Context, certParams *types.CertificateBuildParams)) *AggsenderFlowBaser_GetNewLocalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *AggsenderFlowBaser_GetNewLocalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *AggsenderFlowBaser_GetNewLocalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AggsenderFlowBaser_GetNewLocalExitRoot_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams) (common.Hash, error)) *AggsenderFlowBaser_GetNewLocalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// StartL2Block provides a mock function with no fields
func (_m *AggsenderFlowBaser) StartL2Block() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartL2Block")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// AggsenderFlowBaser_StartL2Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartL2Block'
type AggsenderFlowBaser_StartL2Block_Call struct {
	*mock.Call
}

// StartL2Block is a helper method to define mock.On call
func (_e *AggsenderFlowBaser_Expecter) StartL2Block() *AggsenderFlowBaser_StartL2Block_Call {
	return &AggsenderFlowBaser_StartL2Block_Call{Call: _e.mock.On("StartL2Block")}
}

func (_c *AggsenderFlowBaser_StartL2Block_Call) Run(run func()) *AggsenderFlowBaser_StartL2Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AggsenderFlowBaser_StartL2Block_Call) Return(_a0 uint64) *AggsenderFlowBaser_StartL2Block_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggsenderFlowBaser_StartL2Block_Call) RunAndReturn(run func() uint64) *AggsenderFlowBaser_StartL2Block_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyBlockRangeGaps provides a mock function with given fields: ctx, lastSentCertificate, newFromBlock, newToBlock
func (_m *AggsenderFlowBaser) VerifyBlockRangeGaps(ctx context.Context, lastSentCertificate *types.CertificateHeader, newFromBlock uint64, newToBlock uint64) error {
	ret := _m.Called(ctx, lastSentCertificate, newFromBlock, newToBlock)

	if len(ret) == 0 {
		panic("no return value specified for VerifyBlockRangeGaps")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateHeader, uint64, uint64) error); ok {
		r0 = rf(ctx, lastSentCertificate, newFromBlock, newToBlock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggsenderFlowBaser_VerifyBlockRangeGaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyBlockRangeGaps'
type AggsenderFlowBaser_VerifyBlockRangeGaps_Call struct {
	*mock.Call
}

// VerifyBlockRangeGaps is a helper method to define mock.On call
//   - ctx context.Context
//   - lastSentCertificate *types.CertificateHeader
//   - newFromBlock uint64
//   - newToBlock uint64
func (_e *AggsenderFlowBaser_Expecter) VerifyBlockRangeGaps(ctx interface{}, lastSentCertificate interface{}, newFromBlock interface{}, newToBlock interface{}) *AggsenderFlowBaser_VerifyBlockRangeGaps_Call {
	return &AggsenderFlowBaser_VerifyBlockRangeGaps_Call{Call: _e.mock.On("VerifyBlockRangeGaps", ctx, lastSentCertificate, newFromBlock, newToBlock)}
}

func (_c *AggsenderFlowBaser_VerifyBlockRangeGaps_Call) Run(run func(ctx context.Context, lastSentCertificate *types.CertificateHeader, newFromBlock uint64, newToBlock uint64)) *AggsenderFlowBaser_VerifyBlockRangeGaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateHeader), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *AggsenderFlowBaser_VerifyBlockRangeGaps_Call) Return(_a0 error) *AggsenderFlowBaser_VerifyBlockRangeGaps_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggsenderFlowBaser_VerifyBlockRangeGaps_Call) RunAndReturn(run func(context.Context, *types.CertificateHeader, uint64, uint64) error) *AggsenderFlowBaser_VerifyBlockRangeGaps_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyBuildParams provides a mock function with given fields: ctx, fullCert
func (_m *AggsenderFlowBaser) VerifyBuildParams(ctx context.Context, fullCert *types.CertificateBuildParams) error {
	ret := _m.Called(ctx, fullCert)

	if len(ret) == 0 {
		panic("no return value specified for VerifyBuildParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) error); ok {
		r0 = rf(ctx, fullCert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AggsenderFlowBaser_VerifyBuildParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyBuildParams'
type AggsenderFlowBaser_VerifyBuildParams_Call struct {
	*mock.Call
}

// VerifyBuildParams is a helper method to define mock.On call
//   - ctx context.Context
//   - fullCert *types.CertificateBuildParams
func (_e *AggsenderFlowBaser_Expecter) VerifyBuildParams(ctx interface{}, fullCert interface{}) *AggsenderFlowBaser_VerifyBuildParams_Call {
	return &AggsenderFlowBaser_VerifyBuildParams_Call{Call: _e.mock.On("VerifyBuildParams", ctx, fullCert)}
}

func (_c *AggsenderFlowBaser_VerifyBuildParams_Call) Run(run func(ctx context.Context, fullCert *types.CertificateBuildParams)) *AggsenderFlowBaser_VerifyBuildParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *AggsenderFlowBaser_VerifyBuildParams_Call) Return(_a0 error) *AggsenderFlowBaser_VerifyBuildParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggsenderFlowBaser_VerifyBuildParams_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams) error) *AggsenderFlowBaser_VerifyBuildParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAggsenderFlowBaser creates a new instance of AggsenderFlowBaser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggsenderFlowBaser(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggsenderFlowBaser {
	mock := &AggsenderFlowBaser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
