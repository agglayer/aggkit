// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bridgesync "github.com/agglayer/aggkit/bridgesync"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BridgeQuerier is an autogenerated mock type for the BridgeQuerier type
type BridgeQuerier struct {
	mock.Mock
}

type BridgeQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *BridgeQuerier) EXPECT() *BridgeQuerier_Expecter {
	return &BridgeQuerier_Expecter{mock: &_m.Mock}
}

// GetBridgesAndClaims provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *BridgeQuerier) GetBridgesAndClaims(ctx context.Context, fromBlock uint64, toBlock uint64) ([]bridgesync.Bridge, []bridgesync.Claim, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetBridgesAndClaims")
	}

	var r0 []bridgesync.Bridge
	var r1 []bridgesync.Claim
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]bridgesync.Bridge, []bridgesync.Claim, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []bridgesync.Bridge); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bridgesync.Bridge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) []bridgesync.Claim); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]bridgesync.Claim)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, uint64) error); ok {
		r2 = rf(ctx, fromBlock, toBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BridgeQuerier_GetBridgesAndClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBridgesAndClaims'
type BridgeQuerier_GetBridgesAndClaims_Call struct {
	*mock.Call
}

// GetBridgesAndClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock uint64
func (_e *BridgeQuerier_Expecter) GetBridgesAndClaims(ctx interface{}, fromBlock interface{}, toBlock interface{}) *BridgeQuerier_GetBridgesAndClaims_Call {
	return &BridgeQuerier_GetBridgesAndClaims_Call{Call: _e.mock.On("GetBridgesAndClaims", ctx, fromBlock, toBlock)}
}

func (_c *BridgeQuerier_GetBridgesAndClaims_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock uint64)) *BridgeQuerier_GetBridgesAndClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *BridgeQuerier_GetBridgesAndClaims_Call) Return(_a0 []bridgesync.Bridge, _a1 []bridgesync.Claim, _a2 error) *BridgeQuerier_GetBridgesAndClaims_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BridgeQuerier_GetBridgesAndClaims_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]bridgesync.Bridge, []bridgesync.Claim, error)) *BridgeQuerier_GetBridgesAndClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetExitRootByIndex provides a mock function with given fields: ctx, index
func (_m *BridgeQuerier) GetExitRootByIndex(ctx context.Context, index uint32) (common.Hash, error) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetExitRootByIndex")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (common.Hash, error)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) common.Hash); ok {
		r0 = rf(ctx, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgeQuerier_GetExitRootByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExitRootByIndex'
type BridgeQuerier_GetExitRootByIndex_Call struct {
	*mock.Call
}

// GetExitRootByIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - index uint32
func (_e *BridgeQuerier_Expecter) GetExitRootByIndex(ctx interface{}, index interface{}) *BridgeQuerier_GetExitRootByIndex_Call {
	return &BridgeQuerier_GetExitRootByIndex_Call{Call: _e.mock.On("GetExitRootByIndex", ctx, index)}
}

func (_c *BridgeQuerier_GetExitRootByIndex_Call) Run(run func(ctx context.Context, index uint32)) *BridgeQuerier_GetExitRootByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *BridgeQuerier_GetExitRootByIndex_Call) Return(_a0 common.Hash, _a1 error) *BridgeQuerier_GetExitRootByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgeQuerier_GetExitRootByIndex_Call) RunAndReturn(run func(context.Context, uint32) (common.Hash, error)) *BridgeQuerier_GetExitRootByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastProcessedBlock provides a mock function with given fields: ctx
func (_m *BridgeQuerier) GetLastProcessedBlock(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BridgeQuerier_GetLastProcessedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastProcessedBlock'
type BridgeQuerier_GetLastProcessedBlock_Call struct {
	*mock.Call
}

// GetLastProcessedBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BridgeQuerier_Expecter) GetLastProcessedBlock(ctx interface{}) *BridgeQuerier_GetLastProcessedBlock_Call {
	return &BridgeQuerier_GetLastProcessedBlock_Call{Call: _e.mock.On("GetLastProcessedBlock", ctx)}
}

func (_c *BridgeQuerier_GetLastProcessedBlock_Call) Run(run func(ctx context.Context)) *BridgeQuerier_GetLastProcessedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BridgeQuerier_GetLastProcessedBlock_Call) Return(_a0 uint64, _a1 error) *BridgeQuerier_GetLastProcessedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BridgeQuerier_GetLastProcessedBlock_Call) RunAndReturn(run func(context.Context) (uint64, error)) *BridgeQuerier_GetLastProcessedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NumOfBridgeTransactions provides a mock function with given fields: ctx, fromBlock, toBlock, waitForSyncerToCatchUp
func (_m *BridgeQuerier) NumOfBridgeTransactions(ctx context.Context, fromBlock uint64, toBlock uint64, waitForSyncerToCatchUp bool) (int, int, error) {
	ret := _m.Called(ctx, fromBlock, toBlock, waitForSyncerToCatchUp)

	if len(ret) == 0 {
		panic("no return value specified for NumOfBridgeTransactions")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, bool) (int, int, error)); ok {
		return rf(ctx, fromBlock, toBlock, waitForSyncerToCatchUp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, bool) int); ok {
		r0 = rf(ctx, fromBlock, toBlock, waitForSyncerToCatchUp)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, bool) int); ok {
		r1 = rf(ctx, fromBlock, toBlock, waitForSyncerToCatchUp)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, uint64, bool) error); ok {
		r2 = rf(ctx, fromBlock, toBlock, waitForSyncerToCatchUp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BridgeQuerier_NumOfBridgeTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NumOfBridgeTransactions'
type BridgeQuerier_NumOfBridgeTransactions_Call struct {
	*mock.Call
}

// NumOfBridgeTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock uint64
//   - waitForSyncerToCatchUp bool
func (_e *BridgeQuerier_Expecter) NumOfBridgeTransactions(ctx interface{}, fromBlock interface{}, toBlock interface{}, waitForSyncerToCatchUp interface{}) *BridgeQuerier_NumOfBridgeTransactions_Call {
	return &BridgeQuerier_NumOfBridgeTransactions_Call{Call: _e.mock.On("NumOfBridgeTransactions", ctx, fromBlock, toBlock, waitForSyncerToCatchUp)}
}

func (_c *BridgeQuerier_NumOfBridgeTransactions_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock uint64, waitForSyncerToCatchUp bool)) *BridgeQuerier_NumOfBridgeTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].(bool))
	})
	return _c
}

func (_c *BridgeQuerier_NumOfBridgeTransactions_Call) Return(_a0 int, _a1 int, _a2 error) *BridgeQuerier_NumOfBridgeTransactions_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BridgeQuerier_NumOfBridgeTransactions_Call) RunAndReturn(run func(context.Context, uint64, uint64, bool) (int, int, error)) *BridgeQuerier_NumOfBridgeTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// OriginNetwork provides a mock function with no fields
func (_m *BridgeQuerier) OriginNetwork() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginNetwork")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// BridgeQuerier_OriginNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OriginNetwork'
type BridgeQuerier_OriginNetwork_Call struct {
	*mock.Call
}

// OriginNetwork is a helper method to define mock.On call
func (_e *BridgeQuerier_Expecter) OriginNetwork() *BridgeQuerier_OriginNetwork_Call {
	return &BridgeQuerier_OriginNetwork_Call{Call: _e.mock.On("OriginNetwork")}
}

func (_c *BridgeQuerier_OriginNetwork_Call) Run(run func()) *BridgeQuerier_OriginNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BridgeQuerier_OriginNetwork_Call) Return(_a0 uint32) *BridgeQuerier_OriginNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BridgeQuerier_OriginNetwork_Call) RunAndReturn(run func() uint32) *BridgeQuerier_OriginNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// NewBridgeQuerier creates a new instance of BridgeQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBridgeQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *BridgeQuerier {
	mock := &BridgeQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
