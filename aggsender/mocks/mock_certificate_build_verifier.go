// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/agglayer/aggkit/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// CertificateBuildVerifier is an autogenerated mock type for the CertificateBuildVerifier type
type CertificateBuildVerifier struct {
	mock.Mock
}

type CertificateBuildVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateBuildVerifier) EXPECT() *CertificateBuildVerifier_Expecter {
	return &CertificateBuildVerifier_Expecter{mock: &_m.Mock}
}

// VerifyBuildParams provides a mock function with given fields: fullCert
func (_m *CertificateBuildVerifier) VerifyBuildParams(fullCert *types.CertificateBuildParams) error {
	ret := _m.Called(fullCert)

	if len(ret) == 0 {
		panic("no return value specified for VerifyBuildParams")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.CertificateBuildParams) error); ok {
		r0 = rf(fullCert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CertificateBuildVerifier_VerifyBuildParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyBuildParams'
type CertificateBuildVerifier_VerifyBuildParams_Call struct {
	*mock.Call
}

// VerifyBuildParams is a helper method to define mock.On call
//   - fullCert *types.CertificateBuildParams
func (_e *CertificateBuildVerifier_Expecter) VerifyBuildParams(fullCert interface{}) *CertificateBuildVerifier_VerifyBuildParams_Call {
	return &CertificateBuildVerifier_VerifyBuildParams_Call{Call: _e.mock.On("VerifyBuildParams", fullCert)}
}

func (_c *CertificateBuildVerifier_VerifyBuildParams_Call) Run(run func(fullCert *types.CertificateBuildParams)) *CertificateBuildVerifier_VerifyBuildParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *CertificateBuildVerifier_VerifyBuildParams_Call) Return(_a0 error) *CertificateBuildVerifier_VerifyBuildParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CertificateBuildVerifier_VerifyBuildParams_Call) RunAndReturn(run func(*types.CertificateBuildParams) error) *CertificateBuildVerifier_VerifyBuildParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewCertificateBuildVerifier creates a new instance of CertificateBuildVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateBuildVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateBuildVerifier {
	mock := &CertificateBuildVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
