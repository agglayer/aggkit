// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayertypes "github.com/agglayer/aggkit/agglayer/types"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// CertificateBuilder is an autogenerated mock type for the CertificateBuilder type
type CertificateBuilder struct {
	mock.Mock
}

type CertificateBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateBuilder) EXPECT() *CertificateBuilder_Expecter {
	return &CertificateBuilder_Expecter{mock: &_m.Mock}
}

// BuildCertificate provides a mock function with given fields: ctx, certParams, lastSentCertificate, allowEmptyCert
func (_m *CertificateBuilder) BuildCertificate(ctx context.Context, certParams *types.CertificateBuildParams, lastSentCertificate *types.CertificateHeader, allowEmptyCert bool) (*agglayertypes.Certificate, error) {
	ret := _m.Called(ctx, certParams, lastSentCertificate, allowEmptyCert)

	if len(ret) == 0 {
		panic("no return value specified for BuildCertificate")
	}

	var r0 *agglayertypes.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) (*agglayertypes.Certificate, error)); ok {
		return rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) *agglayertypes.Certificate); ok {
		r0 = rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agglayertypes.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) error); ok {
		r1 = rf(ctx, certParams, lastSentCertificate, allowEmptyCert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificateBuilder_BuildCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCertificate'
type CertificateBuilder_BuildCertificate_Call struct {
	*mock.Call
}

// BuildCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certParams *types.CertificateBuildParams
//   - lastSentCertificate *types.CertificateHeader
//   - allowEmptyCert bool
func (_e *CertificateBuilder_Expecter) BuildCertificate(ctx interface{}, certParams interface{}, lastSentCertificate interface{}, allowEmptyCert interface{}) *CertificateBuilder_BuildCertificate_Call {
	return &CertificateBuilder_BuildCertificate_Call{Call: _e.mock.On("BuildCertificate", ctx, certParams, lastSentCertificate, allowEmptyCert)}
}

func (_c *CertificateBuilder_BuildCertificate_Call) Run(run func(ctx context.Context, certParams *types.CertificateBuildParams, lastSentCertificate *types.CertificateHeader, allowEmptyCert bool)) *CertificateBuilder_BuildCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams), args[2].(*types.CertificateHeader), args[3].(bool))
	})
	return _c
}

func (_c *CertificateBuilder_BuildCertificate_Call) Return(_a0 *agglayertypes.Certificate, _a1 error) *CertificateBuilder_BuildCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CertificateBuilder_BuildCertificate_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams, *types.CertificateHeader, bool) (*agglayertypes.Certificate, error)) *CertificateBuilder_BuildCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateBuildParams provides a mock function with given fields: ctx, allowEmptyCert, certType
func (_m *CertificateBuilder) GetCertificateBuildParams(ctx context.Context, allowEmptyCert bool, certType types.CertificateType) (*types.CertificateBuildParams, error) {
	ret := _m.Called(ctx, allowEmptyCert, certType)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateBuildParams")
	}

	var r0 *types.CertificateBuildParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, types.CertificateType) (*types.CertificateBuildParams, error)); ok {
		return rf(ctx, allowEmptyCert, certType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, types.CertificateType) *types.CertificateBuildParams); ok {
		r0 = rf(ctx, allowEmptyCert, certType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateBuildParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, types.CertificateType) error); ok {
		r1 = rf(ctx, allowEmptyCert, certType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificateBuilder_GetCertificateBuildParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateBuildParams'
type CertificateBuilder_GetCertificateBuildParams_Call struct {
	*mock.Call
}

// GetCertificateBuildParams is a helper method to define mock.On call
//   - ctx context.Context
//   - allowEmptyCert bool
//   - certType types.CertificateType
func (_e *CertificateBuilder_Expecter) GetCertificateBuildParams(ctx interface{}, allowEmptyCert interface{}, certType interface{}) *CertificateBuilder_GetCertificateBuildParams_Call {
	return &CertificateBuilder_GetCertificateBuildParams_Call{Call: _e.mock.On("GetCertificateBuildParams", ctx, allowEmptyCert, certType)}
}

func (_c *CertificateBuilder_GetCertificateBuildParams_Call) Run(run func(ctx context.Context, allowEmptyCert bool, certType types.CertificateType)) *CertificateBuilder_GetCertificateBuildParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(types.CertificateType))
	})
	return _c
}

func (_c *CertificateBuilder_GetCertificateBuildParams_Call) Return(_a0 *types.CertificateBuildParams, _a1 error) *CertificateBuilder_GetCertificateBuildParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CertificateBuilder_GetCertificateBuildParams_Call) RunAndReturn(run func(context.Context, bool, types.CertificateType) (*types.CertificateBuildParams, error)) *CertificateBuilder_GetCertificateBuildParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewLocalExitRoot provides a mock function with given fields: ctx, certParams
func (_m *CertificateBuilder) GetNewLocalExitRoot(ctx context.Context, certParams *types.CertificateBuildParams) (common.Hash, error) {
	ret := _m.Called(ctx, certParams)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLocalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) (common.Hash, error)); ok {
		return rf(ctx, certParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) common.Hash); ok {
		r0 = rf(ctx, certParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams) error); ok {
		r1 = rf(ctx, certParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificateBuilder_GetNewLocalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLocalExitRoot'
type CertificateBuilder_GetNewLocalExitRoot_Call struct {
	*mock.Call
}

// GetNewLocalExitRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - certParams *types.CertificateBuildParams
func (_e *CertificateBuilder_Expecter) GetNewLocalExitRoot(ctx interface{}, certParams interface{}) *CertificateBuilder_GetNewLocalExitRoot_Call {
	return &CertificateBuilder_GetNewLocalExitRoot_Call{Call: _e.mock.On("GetNewLocalExitRoot", ctx, certParams)}
}

func (_c *CertificateBuilder_GetNewLocalExitRoot_Call) Run(run func(ctx context.Context, certParams *types.CertificateBuildParams)) *CertificateBuilder_GetNewLocalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *CertificateBuilder_GetNewLocalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *CertificateBuilder_GetNewLocalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CertificateBuilder_GetNewLocalExitRoot_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams) (common.Hash, error)) *CertificateBuilder_GetNewLocalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewCertificateBuilder creates a new instance of CertificateBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateBuilder {
	mock := &CertificateBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
