// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// CertificateStatusChecker is an autogenerated mock type for the CertificateStatusChecker type
type CertificateStatusChecker struct {
	mock.Mock
}

type CertificateStatusChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateStatusChecker) EXPECT() *CertificateStatusChecker_Expecter {
	return &CertificateStatusChecker_Expecter{mock: &_m.Mock}
}

// CheckInitialStatus provides a mock function with given fields: ctx, delayBetweenRetries, aggsenderStatus
func (_m *CertificateStatusChecker) CheckInitialStatus(ctx context.Context, delayBetweenRetries time.Duration, aggsenderStatus *types.AggsenderStatus) {
	_m.Called(ctx, delayBetweenRetries, aggsenderStatus)
}

// CertificateStatusChecker_CheckInitialStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckInitialStatus'
type CertificateStatusChecker_CheckInitialStatus_Call struct {
	*mock.Call
}

// CheckInitialStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - delayBetweenRetries time.Duration
//   - aggsenderStatus *types.AggsenderStatus
func (_e *CertificateStatusChecker_Expecter) CheckInitialStatus(ctx interface{}, delayBetweenRetries interface{}, aggsenderStatus interface{}) *CertificateStatusChecker_CheckInitialStatus_Call {
	return &CertificateStatusChecker_CheckInitialStatus_Call{Call: _e.mock.On("CheckInitialStatus", ctx, delayBetweenRetries, aggsenderStatus)}
}

func (_c *CertificateStatusChecker_CheckInitialStatus_Call) Run(run func(ctx context.Context, delayBetweenRetries time.Duration, aggsenderStatus *types.AggsenderStatus)) *CertificateStatusChecker_CheckInitialStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(*types.AggsenderStatus))
	})
	return _c
}

func (_c *CertificateStatusChecker_CheckInitialStatus_Call) Return() *CertificateStatusChecker_CheckInitialStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *CertificateStatusChecker_CheckInitialStatus_Call) RunAndReturn(run func(context.Context, time.Duration, *types.AggsenderStatus)) *CertificateStatusChecker_CheckInitialStatus_Call {
	_c.Run(run)
	return _c
}

// CheckPendingCertificatesStatus provides a mock function with given fields: ctx
func (_m *CertificateStatusChecker) CheckPendingCertificatesStatus(ctx context.Context) types.CertStatus {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckPendingCertificatesStatus")
	}

	var r0 types.CertStatus
	if rf, ok := ret.Get(0).(func(context.Context) types.CertStatus); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.CertStatus)
	}

	return r0
}

// CertificateStatusChecker_CheckPendingCertificatesStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPendingCertificatesStatus'
type CertificateStatusChecker_CheckPendingCertificatesStatus_Call struct {
	*mock.Call
}

// CheckPendingCertificatesStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CertificateStatusChecker_Expecter) CheckPendingCertificatesStatus(ctx interface{}) *CertificateStatusChecker_CheckPendingCertificatesStatus_Call {
	return &CertificateStatusChecker_CheckPendingCertificatesStatus_Call{Call: _e.mock.On("CheckPendingCertificatesStatus", ctx)}
}

func (_c *CertificateStatusChecker_CheckPendingCertificatesStatus_Call) Run(run func(ctx context.Context)) *CertificateStatusChecker_CheckPendingCertificatesStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CertificateStatusChecker_CheckPendingCertificatesStatus_Call) Return(_a0 types.CertStatus) *CertificateStatusChecker_CheckPendingCertificatesStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CertificateStatusChecker_CheckPendingCertificatesStatus_Call) RunAndReturn(run func(context.Context) types.CertStatus) *CertificateStatusChecker_CheckPendingCertificatesStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewCertificateStatusChecker creates a new instance of CertificateStatusChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateStatusChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateStatusChecker {
	mock := &CertificateStatusChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
