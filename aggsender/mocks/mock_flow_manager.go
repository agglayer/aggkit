// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayer "github.com/agglayer/aggkit/agglayer"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// FlowManager is an autogenerated mock type for the FlowManager type
type FlowManager struct {
	mock.Mock
}

type FlowManager_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowManager) EXPECT() *FlowManager_Expecter {
	return &FlowManager_Expecter{mock: &_m.Mock}
}

// BuildCertificate provides a mock function with given fields: ctx, buildParams
func (_m *FlowManager) BuildCertificate(ctx context.Context, buildParams *types.CertificateBuildParams) (*agglayer.Certificate, error) {
	ret := _m.Called(ctx, buildParams)

	if len(ret) == 0 {
		panic("no return value specified for BuildCertificate")
	}

	var r0 *agglayer.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) (*agglayer.Certificate, error)); ok {
		return rf(ctx, buildParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) *agglayer.Certificate); ok {
		r0 = rf(ctx, buildParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agglayer.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams) error); ok {
		r1 = rf(ctx, buildParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowManager_BuildCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCertificate'
type FlowManager_BuildCertificate_Call struct {
	*mock.Call
}

// BuildCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - buildParams *types.CertificateBuildParams
func (_e *FlowManager_Expecter) BuildCertificate(ctx interface{}, buildParams interface{}) *FlowManager_BuildCertificate_Call {
	return &FlowManager_BuildCertificate_Call{Call: _e.mock.On("BuildCertificate", ctx, buildParams)}
}

func (_c *FlowManager_BuildCertificate_Call) Run(run func(ctx context.Context, buildParams *types.CertificateBuildParams)) *FlowManager_BuildCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *FlowManager_BuildCertificate_Call) Return(_a0 *agglayer.Certificate, _a1 error) *FlowManager_BuildCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowManager_BuildCertificate_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams) (*agglayer.Certificate, error)) *FlowManager_BuildCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificateBuildParams provides a mock function with given fields: ctx
func (_m *FlowManager) GetCertificateBuildParams(ctx context.Context) (*types.CertificateBuildParams, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateBuildParams")
	}

	var r0 *types.CertificateBuildParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.CertificateBuildParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.CertificateBuildParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateBuildParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowManager_GetCertificateBuildParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificateBuildParams'
type FlowManager_GetCertificateBuildParams_Call struct {
	*mock.Call
}

// GetCertificateBuildParams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FlowManager_Expecter) GetCertificateBuildParams(ctx interface{}) *FlowManager_GetCertificateBuildParams_Call {
	return &FlowManager_GetCertificateBuildParams_Call{Call: _e.mock.On("GetCertificateBuildParams", ctx)}
}

func (_c *FlowManager_GetCertificateBuildParams_Call) Run(run func(ctx context.Context)) *FlowManager_GetCertificateBuildParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FlowManager_GetCertificateBuildParams_Call) Return(_a0 *types.CertificateBuildParams, _a1 error) *FlowManager_GetCertificateBuildParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlowManager_GetCertificateBuildParams_Call) RunAndReturn(run func(context.Context) (*types.CertificateBuildParams, error)) *FlowManager_GetCertificateBuildParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlowManager creates a new instance of FlowManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowManager {
	mock := &FlowManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
