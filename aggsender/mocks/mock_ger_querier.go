// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	agglayertypes "github.com/agglayer/aggkit/agglayer/types"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/tree/types"
)

// GERQuerier is an autogenerated mock type for the GERQuerier type
type GERQuerier struct {
	mock.Mock
}

type GERQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *GERQuerier) EXPECT() *GERQuerier_Expecter {
	return &GERQuerier_Expecter{mock: &_m.Mock}
}

// GetInjectedGERsProofs provides a mock function with given fields: ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock
func (_m *GERQuerier) GetInjectedGERsProofs(ctx context.Context, finalizedL1InfoTreeRoot *types.Root, fromBlock uint64, toBlock uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error) {
	ret := _m.Called(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetInjectedGERsProofs")
	}

	var r0 map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Root, uint64, uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error)); ok {
		return rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Root, uint64, uint64) map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber); ok {
		r0 = rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Root, uint64, uint64) error); ok {
		r1 = rf(ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GERQuerier_GetInjectedGERsProofs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInjectedGERsProofs'
type GERQuerier_GetInjectedGERsProofs_Call struct {
	*mock.Call
}

// GetInjectedGERsProofs is a helper method to define mock.On call
//   - ctx context.Context
//   - finalizedL1InfoTreeRoot *types.Root
//   - fromBlock uint64
//   - toBlock uint64
func (_e *GERQuerier_Expecter) GetInjectedGERsProofs(ctx interface{}, finalizedL1InfoTreeRoot interface{}, fromBlock interface{}, toBlock interface{}) *GERQuerier_GetInjectedGERsProofs_Call {
	return &GERQuerier_GetInjectedGERsProofs_Call{Call: _e.mock.On("GetInjectedGERsProofs", ctx, finalizedL1InfoTreeRoot, fromBlock, toBlock)}
}

func (_c *GERQuerier_GetInjectedGERsProofs_Call) Run(run func(ctx context.Context, finalizedL1InfoTreeRoot *types.Root, fromBlock uint64, toBlock uint64)) *GERQuerier_GetInjectedGERsProofs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Root), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *GERQuerier_GetInjectedGERsProofs_Call) Return(_a0 map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, _a1 error) *GERQuerier_GetInjectedGERsProofs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GERQuerier_GetInjectedGERsProofs_Call) RunAndReturn(run func(context.Context, *types.Root, uint64, uint64) (map[common.Hash]*agglayertypes.ProvenInsertedGERWithBlockNumber, error)) *GERQuerier_GetInjectedGERsProofs_Call {
	_c.Call.Return(run)
	return _c
}

// NewGERQuerier creates a new instance of GERQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGERQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *GERQuerier {
	mock := &GERQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
