// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bridgesync "github.com/agglayer/aggkit/bridgesync"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/agglayer/types"
)

// ImportedBridgeExitConverter is an autogenerated mock type for the ImportedBridgeExitConverter type
type ImportedBridgeExitConverter struct {
	mock.Mock
}

type ImportedBridgeExitConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ImportedBridgeExitConverter) EXPECT() *ImportedBridgeExitConverter_Expecter {
	return &ImportedBridgeExitConverter_Expecter{mock: &_m.Mock}
}

// ConvertToImportedBridgeExit provides a mock function with given fields: ctx, claim, rootFromWhichToProve
func (_m *ImportedBridgeExitConverter) ConvertToImportedBridgeExit(ctx context.Context, claim bridgesync.Claim, rootFromWhichToProve common.Hash) (*types.ImportedBridgeExit, error) {
	ret := _m.Called(ctx, claim, rootFromWhichToProve)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToImportedBridgeExit")
	}

	var r0 *types.ImportedBridgeExit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bridgesync.Claim, common.Hash) (*types.ImportedBridgeExit, error)); ok {
		return rf(ctx, claim, rootFromWhichToProve)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bridgesync.Claim, common.Hash) *types.ImportedBridgeExit); ok {
		r0 = rf(ctx, claim, rootFromWhichToProve)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ImportedBridgeExit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bridgesync.Claim, common.Hash) error); ok {
		r1 = rf(ctx, claim, rootFromWhichToProve)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToImportedBridgeExit'
type ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call struct {
	*mock.Call
}

// ConvertToImportedBridgeExit is a helper method to define mock.On call
//   - ctx context.Context
//   - claim bridgesync.Claim
//   - rootFromWhichToProve common.Hash
func (_e *ImportedBridgeExitConverter_Expecter) ConvertToImportedBridgeExit(ctx interface{}, claim interface{}, rootFromWhichToProve interface{}) *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call {
	return &ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call{Call: _e.mock.On("ConvertToImportedBridgeExit", ctx, claim, rootFromWhichToProve)}
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call) Run(run func(ctx context.Context, claim bridgesync.Claim, rootFromWhichToProve common.Hash)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bridgesync.Claim), args[2].(common.Hash))
	})
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call) Return(_a0 *types.ImportedBridgeExit, _a1 error) *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call) RunAndReturn(run func(context.Context, bridgesync.Claim, common.Hash) (*types.ImportedBridgeExit, error)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExit_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToImportedBridgeExitWithoutClaimData provides a mock function with given fields: claim
func (_m *ImportedBridgeExitConverter) ConvertToImportedBridgeExitWithoutClaimData(claim bridgesync.Claim) (*types.ImportedBridgeExit, error) {
	ret := _m.Called(claim)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToImportedBridgeExitWithoutClaimData")
	}

	var r0 *types.ImportedBridgeExit
	var r1 error
	if rf, ok := ret.Get(0).(func(bridgesync.Claim) (*types.ImportedBridgeExit, error)); ok {
		return rf(claim)
	}
	if rf, ok := ret.Get(0).(func(bridgesync.Claim) *types.ImportedBridgeExit); ok {
		r0 = rf(claim)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ImportedBridgeExit)
		}
	}

	if rf, ok := ret.Get(1).(func(bridgesync.Claim) error); ok {
		r1 = rf(claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToImportedBridgeExitWithoutClaimData'
type ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call struct {
	*mock.Call
}

// ConvertToImportedBridgeExitWithoutClaimData is a helper method to define mock.On call
//   - claim bridgesync.Claim
func (_e *ImportedBridgeExitConverter_Expecter) ConvertToImportedBridgeExitWithoutClaimData(claim interface{}) *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call {
	return &ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call{Call: _e.mock.On("ConvertToImportedBridgeExitWithoutClaimData", claim)}
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call) Run(run func(claim bridgesync.Claim)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bridgesync.Claim))
	})
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call) Return(_a0 *types.ImportedBridgeExit, _a1 error) *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call) RunAndReturn(run func(bridgesync.Claim) (*types.ImportedBridgeExit, error)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExitWithoutClaimData_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToImportedBridgeExits provides a mock function with given fields: ctx, claims, rootFromWhichToProve
func (_m *ImportedBridgeExitConverter) ConvertToImportedBridgeExits(ctx context.Context, claims []bridgesync.Claim, rootFromWhichToProve common.Hash) ([]*types.ImportedBridgeExit, error) {
	ret := _m.Called(ctx, claims, rootFromWhichToProve)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToImportedBridgeExits")
	}

	var r0 []*types.ImportedBridgeExit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []bridgesync.Claim, common.Hash) ([]*types.ImportedBridgeExit, error)); ok {
		return rf(ctx, claims, rootFromWhichToProve)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []bridgesync.Claim, common.Hash) []*types.ImportedBridgeExit); ok {
		r0 = rf(ctx, claims, rootFromWhichToProve)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.ImportedBridgeExit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []bridgesync.Claim, common.Hash) error); ok {
		r1 = rf(ctx, claims, rootFromWhichToProve)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToImportedBridgeExits'
type ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call struct {
	*mock.Call
}

// ConvertToImportedBridgeExits is a helper method to define mock.On call
//   - ctx context.Context
//   - claims []bridgesync.Claim
//   - rootFromWhichToProve common.Hash
func (_e *ImportedBridgeExitConverter_Expecter) ConvertToImportedBridgeExits(ctx interface{}, claims interface{}, rootFromWhichToProve interface{}) *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call {
	return &ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call{Call: _e.mock.On("ConvertToImportedBridgeExits", ctx, claims, rootFromWhichToProve)}
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call) Run(run func(ctx context.Context, claims []bridgesync.Claim, rootFromWhichToProve common.Hash)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]bridgesync.Claim), args[2].(common.Hash))
	})
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call) Return(_a0 []*types.ImportedBridgeExit, _a1 error) *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call) RunAndReturn(run func(context.Context, []bridgesync.Claim, common.Hash) ([]*types.ImportedBridgeExit, error)) *ImportedBridgeExitConverter_ConvertToImportedBridgeExits_Call {
	_c.Call.Return(run)
	return _c
}

// NewImportedBridgeExitConverter creates a new instance of ImportedBridgeExitConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImportedBridgeExitConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImportedBridgeExitConverter {
	mock := &ImportedBridgeExitConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
