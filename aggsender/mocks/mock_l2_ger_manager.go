// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	globalexitrootmanagerl2sovereignchain "github.com/0xPolygon/cdk-contracts-tooling/contracts/l2-sovereign-chain/globalexitrootmanagerl2sovereignchain"

	mock "github.com/stretchr/testify/mock"
)

// L2GERManager is an autogenerated mock type for the L2GERManager type
type L2GERManager struct {
	mock.Mock
}

type L2GERManager_Expecter struct {
	mock *mock.Mock
}

func (_m *L2GERManager) EXPECT() *L2GERManager_Expecter {
	return &L2GERManager_Expecter{mock: &_m.Mock}
}

// BridgeAddress provides a mock function with given fields: _a0
func (_m *L2GERManager) BridgeAddress(_a0 *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BridgeAddress")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L2GERManager_BridgeAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BridgeAddress'
type L2GERManager_BridgeAddress_Call struct {
	*mock.Call
}

// BridgeAddress is a helper method to define mock.On call
//   - _a0 *bind.CallOpts
func (_e *L2GERManager_Expecter) BridgeAddress(_a0 interface{}) *L2GERManager_BridgeAddress_Call {
	return &L2GERManager_BridgeAddress_Call{Call: _e.mock.On("BridgeAddress", _a0)}
}

func (_c *L2GERManager_BridgeAddress_Call) Run(run func(_a0 *bind.CallOpts)) *L2GERManager_BridgeAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *L2GERManager_BridgeAddress_Call) Return(_a0 common.Address, _a1 error) *L2GERManager_BridgeAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L2GERManager_BridgeAddress_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *L2GERManager_BridgeAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FilterInsertGlobalExitRoot provides a mock function with given fields: opts, newGlobalExitRoot, newHashChainValue
func (_m *L2GERManager) FilterInsertGlobalExitRoot(opts *bind.FilterOpts, newGlobalExitRoot [][32]byte, newHashChainValue [][32]byte) (*globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator, error) {
	ret := _m.Called(opts, newGlobalExitRoot, newHashChainValue)

	if len(ret) == 0 {
		panic("no return value specified for FilterInsertGlobalExitRoot")
	}

	var r0 *globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte, [][32]byte) (*globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator, error)); ok {
		return rf(opts, newGlobalExitRoot, newHashChainValue)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte, [][32]byte) *globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator); ok {
		r0 = rf(opts, newGlobalExitRoot, newHashChainValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, [][32]byte, [][32]byte) error); ok {
		r1 = rf(opts, newGlobalExitRoot, newHashChainValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L2GERManager_FilterInsertGlobalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterInsertGlobalExitRoot'
type L2GERManager_FilterInsertGlobalExitRoot_Call struct {
	*mock.Call
}

// FilterInsertGlobalExitRoot is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - newGlobalExitRoot [][32]byte
//   - newHashChainValue [][32]byte
func (_e *L2GERManager_Expecter) FilterInsertGlobalExitRoot(opts interface{}, newGlobalExitRoot interface{}, newHashChainValue interface{}) *L2GERManager_FilterInsertGlobalExitRoot_Call {
	return &L2GERManager_FilterInsertGlobalExitRoot_Call{Call: _e.mock.On("FilterInsertGlobalExitRoot", opts, newGlobalExitRoot, newHashChainValue)}
}

func (_c *L2GERManager_FilterInsertGlobalExitRoot_Call) Run(run func(opts *bind.FilterOpts, newGlobalExitRoot [][32]byte, newHashChainValue [][32]byte)) *L2GERManager_FilterInsertGlobalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([][32]byte), args[2].([][32]byte))
	})
	return _c
}

func (_c *L2GERManager_FilterInsertGlobalExitRoot_Call) Return(_a0 *globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator, _a1 error) *L2GERManager_FilterInsertGlobalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L2GERManager_FilterInsertGlobalExitRoot_Call) RunAndReturn(run func(*bind.FilterOpts, [][32]byte, [][32]byte) (*globalexitrootmanagerl2sovereignchain.Globalexitrootmanagerl2sovereignchainInsertGlobalExitRootIterator, error)) *L2GERManager_FilterInsertGlobalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewL2GERManager creates a new instance of L2GERManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL2GERManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *L2GERManager {
	mock := &L2GERManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
