// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// LERQuerier is an autogenerated mock type for the LERQuerier type
type LERQuerier struct {
	mock.Mock
}

type LERQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *LERQuerier) EXPECT() *LERQuerier_Expecter {
	return &LERQuerier_Expecter{mock: &_m.Mock}
}

// GetLastLocalExitRoot provides a mock function with no fields
func (_m *LERQuerier) GetLastLocalExitRoot() (common.Hash, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastLocalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.Hash, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LERQuerier_GetLastLocalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastLocalExitRoot'
type LERQuerier_GetLastLocalExitRoot_Call struct {
	*mock.Call
}

// GetLastLocalExitRoot is a helper method to define mock.On call
func (_e *LERQuerier_Expecter) GetLastLocalExitRoot() *LERQuerier_GetLastLocalExitRoot_Call {
	return &LERQuerier_GetLastLocalExitRoot_Call{Call: _e.mock.On("GetLastLocalExitRoot")}
}

func (_c *LERQuerier_GetLastLocalExitRoot_Call) Run(run func()) *LERQuerier_GetLastLocalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LERQuerier_GetLastLocalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *LERQuerier_GetLastLocalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LERQuerier_GetLastLocalExitRoot_Call) RunAndReturn(run func() (common.Hash, error)) *LERQuerier_GetLastLocalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewLERQuerier creates a new instance of LERQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLERQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *LERQuerier {
	mock := &LERQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
