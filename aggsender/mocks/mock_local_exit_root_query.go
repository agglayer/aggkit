// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// LocalExitRootQuery is an autogenerated mock type for the LocalExitRootQuery type
type LocalExitRootQuery struct {
	mock.Mock
}

type LocalExitRootQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalExitRootQuery) EXPECT() *LocalExitRootQuery_Expecter {
	return &LocalExitRootQuery_Expecter{mock: &_m.Mock}
}

// GetNewLocalExitRoot provides a mock function with given fields: ctx, certParams
func (_m *LocalExitRootQuery) GetNewLocalExitRoot(ctx context.Context, certParams *types.CertificateBuildParams) (common.Hash, error) {
	ret := _m.Called(ctx, certParams)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLocalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) (common.Hash, error)); ok {
		return rf(ctx, certParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CertificateBuildParams) common.Hash); ok {
		r0 = rf(ctx, certParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CertificateBuildParams) error); ok {
		r1 = rf(ctx, certParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalExitRootQuery_GetNewLocalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLocalExitRoot'
type LocalExitRootQuery_GetNewLocalExitRoot_Call struct {
	*mock.Call
}

// GetNewLocalExitRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - certParams *types.CertificateBuildParams
func (_e *LocalExitRootQuery_Expecter) GetNewLocalExitRoot(ctx interface{}, certParams interface{}) *LocalExitRootQuery_GetNewLocalExitRoot_Call {
	return &LocalExitRootQuery_GetNewLocalExitRoot_Call{Call: _e.mock.On("GetNewLocalExitRoot", ctx, certParams)}
}

func (_c *LocalExitRootQuery_GetNewLocalExitRoot_Call) Run(run func(ctx context.Context, certParams *types.CertificateBuildParams)) *LocalExitRootQuery_GetNewLocalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *LocalExitRootQuery_GetNewLocalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *LocalExitRootQuery_GetNewLocalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LocalExitRootQuery_GetNewLocalExitRoot_Call) RunAndReturn(run func(context.Context, *types.CertificateBuildParams) (common.Hash, error)) *LocalExitRootQuery_GetNewLocalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocalExitRootQuery creates a new instance of LocalExitRootQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalExitRootQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalExitRootQuery {
	mock := &LocalExitRootQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
