// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/agglayer/aggkit/aggsender/types"
	mock "github.com/stretchr/testify/mock"
)

// MaxL2BlockNumberLimiterInterface is an autogenerated mock type for the MaxL2BlockNumberLimiterInterface type
type MaxL2BlockNumberLimiterInterface struct {
	mock.Mock
}

type MaxL2BlockNumberLimiterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MaxL2BlockNumberLimiterInterface) EXPECT() *MaxL2BlockNumberLimiterInterface_Expecter {
	return &MaxL2BlockNumberLimiterInterface_Expecter{mock: &_m.Mock}
}

// AdaptCertificate provides a mock function with given fields: buildParams
func (_m *MaxL2BlockNumberLimiterInterface) AdaptCertificate(buildParams *types.CertificateBuildParams) (*types.CertificateBuildParams, error) {
	ret := _m.Called(buildParams)

	if len(ret) == 0 {
		panic("no return value specified for AdaptCertificate")
	}

	var r0 *types.CertificateBuildParams
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.CertificateBuildParams) (*types.CertificateBuildParams, error)); ok {
		return rf(buildParams)
	}
	if rf, ok := ret.Get(0).(func(*types.CertificateBuildParams) *types.CertificateBuildParams); ok {
		r0 = rf(buildParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CertificateBuildParams)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.CertificateBuildParams) error); ok {
		r1 = rf(buildParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdaptCertificate'
type MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call struct {
	*mock.Call
}

// AdaptCertificate is a helper method to define mock.On call
//   - buildParams *types.CertificateBuildParams
func (_e *MaxL2BlockNumberLimiterInterface_Expecter) AdaptCertificate(buildParams interface{}) *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call {
	return &MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call{Call: _e.mock.On("AdaptCertificate", buildParams)}
}

func (_c *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call) Run(run func(buildParams *types.CertificateBuildParams)) *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call) Return(_a0 *types.CertificateBuildParams, _a1 error) *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call) RunAndReturn(run func(*types.CertificateBuildParams) (*types.CertificateBuildParams, error)) *MaxL2BlockNumberLimiterInterface_AdaptCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMaxL2BlockNumberLimiterInterface creates a new instance of MaxL2BlockNumberLimiterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaxL2BlockNumberLimiterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MaxL2BlockNumberLimiterInterface {
	mock := &MaxL2BlockNumberLimiterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
