// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/aggsender/types"
)

// OptimisticSigner is an autogenerated mock type for the OptimisticSigner type
type OptimisticSigner struct {
	mock.Mock
}

type OptimisticSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *OptimisticSigner) EXPECT() *OptimisticSigner_Expecter {
	return &OptimisticSigner_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function with given fields: ctx, aggchainReq, newLocalExitRoot, certBuildParams
func (_m *OptimisticSigner) Sign(ctx context.Context, aggchainReq types.AggchainProofRequest, newLocalExitRoot common.Hash, certBuildParams *types.CertificateBuildParams) ([]byte, string, error) {
	ret := _m.Called(ctx, aggchainReq, newLocalExitRoot, certBuildParams)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AggchainProofRequest, common.Hash, *types.CertificateBuildParams) ([]byte, string, error)); ok {
		return rf(ctx, aggchainReq, newLocalExitRoot, certBuildParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AggchainProofRequest, common.Hash, *types.CertificateBuildParams) []byte); ok {
		r0 = rf(ctx, aggchainReq, newLocalExitRoot, certBuildParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AggchainProofRequest, common.Hash, *types.CertificateBuildParams) string); ok {
		r1 = rf(ctx, aggchainReq, newLocalExitRoot, certBuildParams)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.AggchainProofRequest, common.Hash, *types.CertificateBuildParams) error); ok {
		r2 = rf(ctx, aggchainReq, newLocalExitRoot, certBuildParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OptimisticSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type OptimisticSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - aggchainReq types.AggchainProofRequest
//   - newLocalExitRoot common.Hash
//   - certBuildParams *types.CertificateBuildParams
func (_e *OptimisticSigner_Expecter) Sign(ctx interface{}, aggchainReq interface{}, newLocalExitRoot interface{}, certBuildParams interface{}) *OptimisticSigner_Sign_Call {
	return &OptimisticSigner_Sign_Call{Call: _e.mock.On("Sign", ctx, aggchainReq, newLocalExitRoot, certBuildParams)}
}

func (_c *OptimisticSigner_Sign_Call) Run(run func(ctx context.Context, aggchainReq types.AggchainProofRequest, newLocalExitRoot common.Hash, certBuildParams *types.CertificateBuildParams)) *OptimisticSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AggchainProofRequest), args[2].(common.Hash), args[3].(*types.CertificateBuildParams))
	})
	return _c
}

func (_c *OptimisticSigner_Sign_Call) Return(_a0 []byte, _a1 string, _a2 error) *OptimisticSigner_Sign_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OptimisticSigner_Sign_Call) RunAndReturn(run func(context.Context, types.AggchainProofRequest, common.Hash, *types.CertificateBuildParams) ([]byte, string, error)) *OptimisticSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewOptimisticSigner creates a new instance of OptimisticSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOptimisticSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *OptimisticSigner {
	mock := &OptimisticSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
