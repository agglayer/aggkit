// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	polygonrollupmanager "github.com/0xPolygon/cdk-contracts-tooling/contracts/pp/l2-sovereign-chain/polygonrollupmanager"
	mock "github.com/stretchr/testify/mock"
)

// RollupDataQuerier is an autogenerated mock type for the RollupDataQuerier type
type RollupDataQuerier struct {
	mock.Mock
}

type RollupDataQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *RollupDataQuerier) EXPECT() *RollupDataQuerier_Expecter {
	return &RollupDataQuerier_Expecter{mock: &_m.Mock}
}

// GetRollupData provides a mock function with given fields: blockNumber
func (_m *RollupDataQuerier) GetRollupData(blockNumber *big.Int) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error) {
	ret := _m.Called(blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetRollupData")
	}

	var r0 polygonrollupmanager.PolygonRollupManagerRollupDataReturn
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error)); ok {
		return rf(blockNumber)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) polygonrollupmanager.PolygonRollupManagerRollupDataReturn); ok {
		r0 = rf(blockNumber)
	} else {
		r0 = ret.Get(0).(polygonrollupmanager.PolygonRollupManagerRollupDataReturn)
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupDataQuerier_GetRollupData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupData'
type RollupDataQuerier_GetRollupData_Call struct {
	*mock.Call
}

// GetRollupData is a helper method to define mock.On call
//   - blockNumber *big.Int
func (_e *RollupDataQuerier_Expecter) GetRollupData(blockNumber interface{}) *RollupDataQuerier_GetRollupData_Call {
	return &RollupDataQuerier_GetRollupData_Call{Call: _e.mock.On("GetRollupData", blockNumber)}
}

func (_c *RollupDataQuerier_GetRollupData_Call) Run(run func(blockNumber *big.Int)) *RollupDataQuerier_GetRollupData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *RollupDataQuerier_GetRollupData_Call) Return(_a0 polygonrollupmanager.PolygonRollupManagerRollupDataReturn, _a1 error) *RollupDataQuerier_GetRollupData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RollupDataQuerier_GetRollupData_Call) RunAndReturn(run func(*big.Int) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error)) *RollupDataQuerier_GetRollupData_Call {
	_c.Call.Return(run)
	return _c
}

// NewRollupDataQuerier creates a new instance of RollupDataQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRollupDataQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *RollupDataQuerier {
	mock := &RollupDataQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
