// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	mock "github.com/stretchr/testify/mock"
)

// FEPContractQuerier is an autogenerated mock type for the FEPContractQuerier type
type FEPContractQuerier struct {
	mock.Mock
}

type FEPContractQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *FEPContractQuerier) EXPECT() *FEPContractQuerier_Expecter {
	return &FEPContractQuerier_Expecter{mock: &_m.Mock}
}

// OptimisticMode provides a mock function with given fields: opts
func (_m *FEPContractQuerier) OptimisticMode(opts *bind.CallOpts) (bool, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for OptimisticMode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (bool, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) bool); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FEPContractQuerier_OptimisticMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptimisticMode'
type FEPContractQuerier_OptimisticMode_Call struct {
	*mock.Call
}

// OptimisticMode is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *FEPContractQuerier_Expecter) OptimisticMode(opts interface{}) *FEPContractQuerier_OptimisticMode_Call {
	return &FEPContractQuerier_OptimisticMode_Call{Call: _e.mock.On("OptimisticMode", opts)}
}

func (_c *FEPContractQuerier_OptimisticMode_Call) Run(run func(opts *bind.CallOpts)) *FEPContractQuerier_OptimisticMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *FEPContractQuerier_OptimisticMode_Call) Return(_a0 bool, _a1 error) *FEPContractQuerier_OptimisticMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FEPContractQuerier_OptimisticMode_Call) RunAndReturn(run func(*bind.CallOpts) (bool, error)) *FEPContractQuerier_OptimisticMode_Call {
	_c.Call.Return(run)
	return _c
}

// RangeVkeyCommitment provides a mock function with given fields: opts
func (_m *FEPContractQuerier) RangeVkeyCommitment(opts *bind.CallOpts) ([32]byte, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for RangeVkeyCommitment")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([32]byte, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) [32]byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FEPContractQuerier_RangeVkeyCommitment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RangeVkeyCommitment'
type FEPContractQuerier_RangeVkeyCommitment_Call struct {
	*mock.Call
}

// RangeVkeyCommitment is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *FEPContractQuerier_Expecter) RangeVkeyCommitment(opts interface{}) *FEPContractQuerier_RangeVkeyCommitment_Call {
	return &FEPContractQuerier_RangeVkeyCommitment_Call{Call: _e.mock.On("RangeVkeyCommitment", opts)}
}

func (_c *FEPContractQuerier_RangeVkeyCommitment_Call) Run(run func(opts *bind.CallOpts)) *FEPContractQuerier_RangeVkeyCommitment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *FEPContractQuerier_RangeVkeyCommitment_Call) Return(_a0 [32]byte, _a1 error) *FEPContractQuerier_RangeVkeyCommitment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FEPContractQuerier_RangeVkeyCommitment_Call) RunAndReturn(run func(*bind.CallOpts) ([32]byte, error)) *FEPContractQuerier_RangeVkeyCommitment_Call {
	_c.Call.Return(run)
	return _c
}

// RollupConfigHash provides a mock function with given fields: opts
func (_m *FEPContractQuerier) RollupConfigHash(opts *bind.CallOpts) ([32]byte, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for RollupConfigHash")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([32]byte, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) [32]byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FEPContractQuerier_RollupConfigHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollupConfigHash'
type FEPContractQuerier_RollupConfigHash_Call struct {
	*mock.Call
}

// RollupConfigHash is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *FEPContractQuerier_Expecter) RollupConfigHash(opts interface{}) *FEPContractQuerier_RollupConfigHash_Call {
	return &FEPContractQuerier_RollupConfigHash_Call{Call: _e.mock.On("RollupConfigHash", opts)}
}

func (_c *FEPContractQuerier_RollupConfigHash_Call) Run(run func(opts *bind.CallOpts)) *FEPContractQuerier_RollupConfigHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *FEPContractQuerier_RollupConfigHash_Call) Return(_a0 [32]byte, _a1 error) *FEPContractQuerier_RollupConfigHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FEPContractQuerier_RollupConfigHash_Call) RunAndReturn(run func(*bind.CallOpts) ([32]byte, error)) *FEPContractQuerier_RollupConfigHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewFEPContractQuerier creates a new instance of FEPContractQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFEPContractQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *FEPContractQuerier {
	mock := &FEPContractQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
