// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	optimistichash "github.com/agglayer/aggkit/aggsender/optimistic/optimistichash"
)

// OptimisticAggregationProofPublicValuesQuerier is an autogenerated mock type for the OptimisticAggregationProofPublicValuesQuerier type
type OptimisticAggregationProofPublicValuesQuerier struct {
	mock.Mock
}

type OptimisticAggregationProofPublicValuesQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *OptimisticAggregationProofPublicValuesQuerier) EXPECT() *OptimisticAggregationProofPublicValuesQuerier_Expecter {
	return &OptimisticAggregationProofPublicValuesQuerier_Expecter{mock: &_m.Mock}
}

// GetAggregationProofPublicValuesData provides a mock function with given fields: lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash
func (_m *OptimisticAggregationProofPublicValuesQuerier) GetAggregationProofPublicValuesData(lastProvenBlock uint64, requestedEndBlock uint64, l1InfoTreeLeafHash common.Hash) (*optimistichash.AggregationProofPublicValues, error) {
	ret := _m.Called(lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregationProofPublicValuesData")
	}

	var r0 *optimistichash.AggregationProofPublicValues
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash) (*optimistichash.AggregationProofPublicValues, error)); ok {
		return rf(lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash) *optimistichash.AggregationProofPublicValues); ok {
		r0 = rf(lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*optimistichash.AggregationProofPublicValues)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, common.Hash) error); ok {
		r1 = rf(lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregationProofPublicValuesData'
type OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call struct {
	*mock.Call
}

// GetAggregationProofPublicValuesData is a helper method to define mock.On call
//   - lastProvenBlock uint64
//   - requestedEndBlock uint64
//   - l1InfoTreeLeafHash common.Hash
func (_e *OptimisticAggregationProofPublicValuesQuerier_Expecter) GetAggregationProofPublicValuesData(lastProvenBlock interface{}, requestedEndBlock interface{}, l1InfoTreeLeafHash interface{}) *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call {
	return &OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call{Call: _e.mock.On("GetAggregationProofPublicValuesData", lastProvenBlock, requestedEndBlock, l1InfoTreeLeafHash)}
}

func (_c *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call) Run(run func(lastProvenBlock uint64, requestedEndBlock uint64, l1InfoTreeLeafHash common.Hash)) *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(common.Hash))
	})
	return _c
}

func (_c *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call) Return(_a0 *optimistichash.AggregationProofPublicValues, _a1 error) *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call) RunAndReturn(run func(uint64, uint64, common.Hash) (*optimistichash.AggregationProofPublicValues, error)) *OptimisticAggregationProofPublicValuesQuerier_GetAggregationProofPublicValuesData_Call {
	_c.Call.Return(run)
	return _c
}

// NewOptimisticAggregationProofPublicValuesQuerier creates a new instance of OptimisticAggregationProofPublicValuesQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOptimisticAggregationProofPublicValuesQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *OptimisticAggregationProofPublicValuesQuerier {
	mock := &OptimisticAggregationProofPublicValuesQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
