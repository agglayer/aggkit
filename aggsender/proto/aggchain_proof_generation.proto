// Proto definition for AggSender service

syntax = "proto3";
package proto;
option go_package = "github.com/agglayer/aggkit/aggsender/types";

import "bytes.proto";
import "claim.proto";
import "imported_bridge_exit.proto";

// Service for generating aggchain proof.
service AggchainProofService {
  // Generates a aggchain proof for a given start_block.
  rpc GenerateAggchainProof(GenerateAggchainProofRequest) returns (GenerateAggchainProofResponse);
}

// The request message for generating aggchain proof.
message GenerateAggchainProofRequest {
  // The start block for which the aggchain proof is requested.
  uint64 start_block = 1;
  // The max end block for which the aggchain proof is requested.
  uint64 max_end_block = 2;
  // L1 Info tree root. (hash)
  FixedBytes32 l1_info_tree_root_hash = 3;
  // L1 Info tree leaf
  L1InfoTreeLeaf l1_info_tree_leaf = 4;
  // L1 Info tree proof. ([32]hash)
  MerkleProof l1_info_tree_merkle_proof = 5;
  // Map of the GER with their ger leaf. Note: the GER (string) is a base64 encoded string of the GER digest.
  map<string, ClaimFromMainnet> ger_leaves = 6;
  // bridge exits
  repeated ImportedBridgeExit imported_bridge_exits = 7;
}

// The aggchain proof response message.
message GenerateAggchainProofResponse {
  // Aggchain proof.
  bytes aggchain_proof = 1;
  // The start block of the aggchain proof.
  uint64 start_block = 2;
  // The end block of the aggchain proof.
  uint64 end_block = 3;
  // Local exit root hash.
  FixedBytes32 local_exit_root_hash = 4;
  // Custom chain data.
  bytes custom_chain_data = 5;
}
