// Proto definition for AggSender service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: aggsender.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthProofService_FetchAuthProof_FullMethodName = "/types.AuthProofService/FetchAuthProof"
)

// AuthProofServiceClient is the client API for AuthProofService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for fetching auth proof.
type AuthProofServiceClient interface {
	// Fetches a auth-proof for a given start_block.
	FetchAuthProof(ctx context.Context, in *FetchAuthProofRequest, opts ...grpc.CallOption) (*FetchAuthProofResponse, error)
}

type authProofServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProofServiceClient(cc grpc.ClientConnInterface) AuthProofServiceClient {
	return &authProofServiceClient{cc}
}

func (c *authProofServiceClient) FetchAuthProof(ctx context.Context, in *FetchAuthProofRequest, opts ...grpc.CallOption) (*FetchAuthProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAuthProofResponse)
	err := c.cc.Invoke(ctx, AuthProofService_FetchAuthProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProofServiceServer is the server API for AuthProofService service.
// All implementations must embed UnimplementedAuthProofServiceServer
// for forward compatibility.
//
// Service for fetching auth proof.
type AuthProofServiceServer interface {
	// Fetches a auth-proof for a given start_block.
	FetchAuthProof(context.Context, *FetchAuthProofRequest) (*FetchAuthProofResponse, error)
	mustEmbedUnimplementedAuthProofServiceServer()
}

// UnimplementedAuthProofServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthProofServiceServer struct{}

func (UnimplementedAuthProofServiceServer) FetchAuthProof(context.Context, *FetchAuthProofRequest) (*FetchAuthProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAuthProof not implemented")
}
func (UnimplementedAuthProofServiceServer) mustEmbedUnimplementedAuthProofServiceServer() {}
func (UnimplementedAuthProofServiceServer) testEmbeddedByValue()                          {}

// UnsafeAuthProofServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthProofServiceServer will
// result in compilation errors.
type UnsafeAuthProofServiceServer interface {
	mustEmbedUnimplementedAuthProofServiceServer()
}

func RegisterAuthProofServiceServer(s grpc.ServiceRegistrar, srv AuthProofServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthProofServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthProofService_ServiceDesc, srv)
}

func _AuthProofService_FetchAuthProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAuthProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProofServiceServer).FetchAuthProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthProofService_FetchAuthProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProofServiceServer).FetchAuthProof(ctx, req.(*FetchAuthProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthProofService_ServiceDesc is the grpc.ServiceDesc for AuthProofService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthProofService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.AuthProofService",
	HandlerType: (*AuthProofServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAuthProof",
			Handler:    _AuthProofService_FetchAuthProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggsender.proto",
}
