// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: claim.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a claim from the mainnet.
type ClaimFromMainnet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Proof from bridge exit leaf to MER
	ProofLeafMer *MerkleProof `protobuf:"bytes,1,opt,name=proof_leaf_mer,json=proofLeafMer,proto3" json:"proof_leaf_mer,omitempty"`
	// Proof from GER to L1Root
	ProofGerL1Root *MerkleProof `protobuf:"bytes,2,opt,name=proof_ger_l1root,json=proofGerL1root,proto3" json:"proof_ger_l1root,omitempty"`
	// L1InfoTree leaf
	L1Leaf        *L1InfoTreeLeaf `protobuf:"bytes,3,opt,name=l1_leaf,json=l1Leaf,proto3" json:"l1_leaf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClaimFromMainnet) Reset() {
	*x = ClaimFromMainnet{}
	mi := &file_claim_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimFromMainnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFromMainnet) ProtoMessage() {}

func (x *ClaimFromMainnet) ProtoReflect() protoreflect.Message {
	mi := &file_claim_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFromMainnet.ProtoReflect.Descriptor instead.
func (*ClaimFromMainnet) Descriptor() ([]byte, []int) {
	return file_claim_proto_rawDescGZIP(), []int{0}
}

func (x *ClaimFromMainnet) GetProofLeafMer() *MerkleProof {
	if x != nil {
		return x.ProofLeafMer
	}
	return nil
}

func (x *ClaimFromMainnet) GetProofGerL1Root() *MerkleProof {
	if x != nil {
		return x.ProofGerL1Root
	}
	return nil
}

func (x *ClaimFromMainnet) GetL1Leaf() *L1InfoTreeLeaf {
	if x != nil {
		return x.L1Leaf
	}
	return nil
}

// Represents a leaf in the L1InfoTree.
type L1InfoTreeLeaf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// l1 info tree leaf index
	L1InfoTreeIndex uint32 `protobuf:"varint,1,opt,name=l1_info_tree_index,json=l1InfoTreeIndex,proto3" json:"l1_info_tree_index,omitempty"`
	// Rollup exit root
	Rer *FixedBytes32 `protobuf:"bytes,2,opt,name=rer,proto3" json:"rer,omitempty"`
	// Mainnet exit root
	Mer *FixedBytes32 `protobuf:"bytes,3,opt,name=mer,proto3" json:"mer,omitempty"`
	// Inner leaf
	Inner         *L1InfoTreeLeafInner `protobuf:"bytes,4,opt,name=inner,proto3" json:"inner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L1InfoTreeLeaf) Reset() {
	*x = L1InfoTreeLeaf{}
	mi := &file_claim_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L1InfoTreeLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1InfoTreeLeaf) ProtoMessage() {}

func (x *L1InfoTreeLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_claim_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1InfoTreeLeaf.ProtoReflect.Descriptor instead.
func (*L1InfoTreeLeaf) Descriptor() ([]byte, []int) {
	return file_claim_proto_rawDescGZIP(), []int{1}
}

func (x *L1InfoTreeLeaf) GetL1InfoTreeIndex() uint32 {
	if x != nil {
		return x.L1InfoTreeIndex
	}
	return 0
}

func (x *L1InfoTreeLeaf) GetRer() *FixedBytes32 {
	if x != nil {
		return x.Rer
	}
	return nil
}

func (x *L1InfoTreeLeaf) GetMer() *FixedBytes32 {
	if x != nil {
		return x.Mer
	}
	return nil
}

func (x *L1InfoTreeLeaf) GetInner() *L1InfoTreeLeafInner {
	if x != nil {
		return x.Inner
	}
	return nil
}

// Represents the inner part of a leaf in the L1InfoTree.
type L1InfoTreeLeafInner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The global exit root.
	GlobalExitRoot *FixedBytes32 `protobuf:"bytes,1,opt,name=global_exit_root,json=globalExitRoot,proto3" json:"global_exit_root,omitempty"`
	// Block hash.
	BlockHash *FixedBytes32 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Timestamp.
	Timestamp     uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *L1InfoTreeLeafInner) Reset() {
	*x = L1InfoTreeLeafInner{}
	mi := &file_claim_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L1InfoTreeLeafInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1InfoTreeLeafInner) ProtoMessage() {}

func (x *L1InfoTreeLeafInner) ProtoReflect() protoreflect.Message {
	mi := &file_claim_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1InfoTreeLeafInner.ProtoReflect.Descriptor instead.
func (*L1InfoTreeLeafInner) Descriptor() ([]byte, []int) {
	return file_claim_proto_rawDescGZIP(), []int{2}
}

func (x *L1InfoTreeLeafInner) GetGlobalExitRoot() *FixedBytes32 {
	if x != nil {
		return x.GlobalExitRoot
	}
	return nil
}

func (x *L1InfoTreeLeafInner) GetBlockHash() *FixedBytes32 {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *L1InfoTreeLeafInner) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Represents a Merkle proof.
type MerkleProof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The root of the Merkle tree.
	Root *FixedBytes32 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// The path from the leaf to the root.
	Siblings      []*FixedBytes32 `protobuf:"bytes,2,rep,name=siblings,proto3" json:"siblings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleProof) Reset() {
	*x = MerkleProof{}
	mi := &file_claim_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleProof) ProtoMessage() {}

func (x *MerkleProof) ProtoReflect() protoreflect.Message {
	mi := &file_claim_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleProof.ProtoReflect.Descriptor instead.
func (*MerkleProof) Descriptor() ([]byte, []int) {
	return file_claim_proto_rawDescGZIP(), []int{3}
}

func (x *MerkleProof) GetRoot() *FixedBytes32 {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *MerkleProof) GetSiblings() []*FixedBytes32 {
	if x != nil {
		return x.Siblings
	}
	return nil
}

// Represents a claim from the rollup.
type ClaimFromRollup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Proof from bridge exit leaf to LER
	ProofLeafLer *MerkleProof `protobuf:"bytes,1,opt,name=proof_leaf_ler,json=proofLeafLer,proto3" json:"proof_leaf_ler,omitempty"`
	// Proof from LER to RER
	ProofLerRer *MerkleProof `protobuf:"bytes,2,opt,name=proof_ler_rer,json=proofLerRer,proto3" json:"proof_ler_rer,omitempty"`
	// Proof from GER to L1Root
	ProofGerL1Root *MerkleProof `protobuf:"bytes,3,opt,name=proof_ger_l1root,json=proofGerL1root,proto3" json:"proof_ger_l1root,omitempty"`
	// L1InfoTree leaf
	L1Leaf        *L1InfoTreeLeaf `protobuf:"bytes,4,opt,name=l1_leaf,json=l1Leaf,proto3" json:"l1_leaf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClaimFromRollup) Reset() {
	*x = ClaimFromRollup{}
	mi := &file_claim_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimFromRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimFromRollup) ProtoMessage() {}

func (x *ClaimFromRollup) ProtoReflect() protoreflect.Message {
	mi := &file_claim_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimFromRollup.ProtoReflect.Descriptor instead.
func (*ClaimFromRollup) Descriptor() ([]byte, []int) {
	return file_claim_proto_rawDescGZIP(), []int{4}
}

func (x *ClaimFromRollup) GetProofLeafLer() *MerkleProof {
	if x != nil {
		return x.ProofLeafLer
	}
	return nil
}

func (x *ClaimFromRollup) GetProofLerRer() *MerkleProof {
	if x != nil {
		return x.ProofLerRer
	}
	return nil
}

func (x *ClaimFromRollup) GetProofGerL1Root() *MerkleProof {
	if x != nil {
		return x.ProofGerL1Root
	}
	return nil
}

func (x *ClaimFromRollup) GetL1Leaf() *L1InfoTreeLeaf {
	if x != nil {
		return x.L1Leaf
	}
	return nil
}

var File_claim_proto protoreflect.FileDescriptor

var file_claim_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x65, 0x61, 0x66, 0x4d, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x31,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x4c, 0x31, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x6c, 0x31, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72,
	0x65, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x06, 0x6c, 0x31, 0x4c, 0x65, 0x61, 0x66, 0x22, 0xbd,
	0x01, 0x0a, 0x0e, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x61,
	0x66, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25,
	0x0a, 0x03, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32,
	0x52, 0x03, 0x72, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x03, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65,
	0x61, 0x66, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xa6,
	0x01, 0x0a, 0x13, 0x4c, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x61,
	0x66, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x67, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x33, 0x32, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6c, 0x65,
	0x61, 0x66, 0x5f, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4c, 0x65, 0x61, 0x66, 0x4c, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x4c, 0x65, 0x72, 0x52, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f,
	0x67, 0x65, 0x72, 0x5f, 0x6c, 0x31, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x4c, 0x31,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x6c, 0x31, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x31,
	0x49, 0x6e, 0x66, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x06, 0x6c, 0x31,
	0x4c, 0x65, 0x61, 0x66, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x67, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x61, 0x67, 0x67, 0x6b,
	0x69, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_claim_proto_rawDescOnce sync.Once
	file_claim_proto_rawDescData = file_claim_proto_rawDesc
)

func file_claim_proto_rawDescGZIP() []byte {
	file_claim_proto_rawDescOnce.Do(func() {
		file_claim_proto_rawDescData = protoimpl.X.CompressGZIP(file_claim_proto_rawDescData)
	})
	return file_claim_proto_rawDescData
}

var file_claim_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_claim_proto_goTypes = []any{
	(*ClaimFromMainnet)(nil),    // 0: proto.ClaimFromMainnet
	(*L1InfoTreeLeaf)(nil),      // 1: proto.L1InfoTreeLeaf
	(*L1InfoTreeLeafInner)(nil), // 2: proto.L1InfoTreeLeafInner
	(*MerkleProof)(nil),         // 3: proto.MerkleProof
	(*ClaimFromRollup)(nil),     // 4: proto.ClaimFromRollup
	(*FixedBytes32)(nil),        // 5: proto.FixedBytes32
}
var file_claim_proto_depIdxs = []int32{
	3,  // 0: proto.ClaimFromMainnet.proof_leaf_mer:type_name -> proto.MerkleProof
	3,  // 1: proto.ClaimFromMainnet.proof_ger_l1root:type_name -> proto.MerkleProof
	1,  // 2: proto.ClaimFromMainnet.l1_leaf:type_name -> proto.L1InfoTreeLeaf
	5,  // 3: proto.L1InfoTreeLeaf.rer:type_name -> proto.FixedBytes32
	5,  // 4: proto.L1InfoTreeLeaf.mer:type_name -> proto.FixedBytes32
	2,  // 5: proto.L1InfoTreeLeaf.inner:type_name -> proto.L1InfoTreeLeafInner
	5,  // 6: proto.L1InfoTreeLeafInner.global_exit_root:type_name -> proto.FixedBytes32
	5,  // 7: proto.L1InfoTreeLeafInner.block_hash:type_name -> proto.FixedBytes32
	5,  // 8: proto.MerkleProof.root:type_name -> proto.FixedBytes32
	5,  // 9: proto.MerkleProof.siblings:type_name -> proto.FixedBytes32
	3,  // 10: proto.ClaimFromRollup.proof_leaf_ler:type_name -> proto.MerkleProof
	3,  // 11: proto.ClaimFromRollup.proof_ler_rer:type_name -> proto.MerkleProof
	3,  // 12: proto.ClaimFromRollup.proof_ger_l1root:type_name -> proto.MerkleProof
	1,  // 13: proto.ClaimFromRollup.l1_leaf:type_name -> proto.L1InfoTreeLeaf
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_claim_proto_init() }
func file_claim_proto_init() {
	if File_claim_proto != nil {
		return
	}
	file_bytes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_claim_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_claim_proto_goTypes,
		DependencyIndexes: file_claim_proto_depIdxs,
		MessageInfos:      file_claim_proto_msgTypes,
	}.Build()
	File_claim_proto = out.File
	file_claim_proto_rawDesc = nil
	file_claim_proto_goTypes = nil
	file_claim_proto_depIdxs = nil
}
