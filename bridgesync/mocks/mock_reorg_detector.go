// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	reorgdetector "github.com/agglayer/aggkit/reorgdetector"

	types "github.com/agglayer/aggkit/types"
)

// ReorgDetector is an autogenerated mock type for the ReorgDetector type
type ReorgDetector struct {
	mock.Mock
}

type ReorgDetector_Expecter struct {
	mock *mock.Mock
}

func (_m *ReorgDetector) EXPECT() *ReorgDetector_Expecter {
	return &ReorgDetector_Expecter{mock: &_m.Mock}
}

// AddBlockToTrack provides a mock function with given fields: ctx, id, blockNum, blockHash
func (_m *ReorgDetector) AddBlockToTrack(ctx context.Context, id string, blockNum uint64, blockHash common.Hash) error {
	ret := _m.Called(ctx, id, blockNum, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for AddBlockToTrack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, common.Hash) error); ok {
		r0 = rf(ctx, id, blockNum, blockHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReorgDetector_AddBlockToTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlockToTrack'
type ReorgDetector_AddBlockToTrack_Call struct {
	*mock.Call
}

// AddBlockToTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - blockNum uint64
//   - blockHash common.Hash
func (_e *ReorgDetector_Expecter) AddBlockToTrack(ctx interface{}, id interface{}, blockNum interface{}, blockHash interface{}) *ReorgDetector_AddBlockToTrack_Call {
	return &ReorgDetector_AddBlockToTrack_Call{Call: _e.mock.On("AddBlockToTrack", ctx, id, blockNum, blockHash)}
}

func (_c *ReorgDetector_AddBlockToTrack_Call) Run(run func(ctx context.Context, id string, blockNum uint64, blockHash common.Hash)) *ReorgDetector_AddBlockToTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(common.Hash))
	})
	return _c
}

func (_c *ReorgDetector_AddBlockToTrack_Call) Return(_a0 error) *ReorgDetector_AddBlockToTrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReorgDetector_AddBlockToTrack_Call) RunAndReturn(run func(context.Context, string, uint64, common.Hash) error) *ReorgDetector_AddBlockToTrack_Call {
	_c.Call.Return(run)
	return _c
}

// GetFinalizedBlockType provides a mock function with no fields
func (_m *ReorgDetector) GetFinalizedBlockType() types.BlockNumberFinality {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFinalizedBlockType")
	}

	var r0 types.BlockNumberFinality
	if rf, ok := ret.Get(0).(func() types.BlockNumberFinality); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.BlockNumberFinality)
	}

	return r0
}

// ReorgDetector_GetFinalizedBlockType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFinalizedBlockType'
type ReorgDetector_GetFinalizedBlockType_Call struct {
	*mock.Call
}

// GetFinalizedBlockType is a helper method to define mock.On call
func (_e *ReorgDetector_Expecter) GetFinalizedBlockType() *ReorgDetector_GetFinalizedBlockType_Call {
	return &ReorgDetector_GetFinalizedBlockType_Call{Call: _e.mock.On("GetFinalizedBlockType")}
}

func (_c *ReorgDetector_GetFinalizedBlockType_Call) Run(run func()) *ReorgDetector_GetFinalizedBlockType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReorgDetector_GetFinalizedBlockType_Call) Return(_a0 types.BlockNumberFinality) *ReorgDetector_GetFinalizedBlockType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReorgDetector_GetFinalizedBlockType_Call) RunAndReturn(run func() types.BlockNumberFinality) *ReorgDetector_GetFinalizedBlockType_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastReorgEvent provides a mock function with given fields: ctx
func (_m *ReorgDetector) GetLastReorgEvent(ctx context.Context) (reorgdetector.ReorgEvent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastReorgEvent")
	}

	var r0 reorgdetector.ReorgEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (reorgdetector.ReorgEvent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) reorgdetector.ReorgEvent); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(reorgdetector.ReorgEvent)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReorgDetector_GetLastReorgEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastReorgEvent'
type ReorgDetector_GetLastReorgEvent_Call struct {
	*mock.Call
}

// GetLastReorgEvent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ReorgDetector_Expecter) GetLastReorgEvent(ctx interface{}) *ReorgDetector_GetLastReorgEvent_Call {
	return &ReorgDetector_GetLastReorgEvent_Call{Call: _e.mock.On("GetLastReorgEvent", ctx)}
}

func (_c *ReorgDetector_GetLastReorgEvent_Call) Run(run func(ctx context.Context)) *ReorgDetector_GetLastReorgEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ReorgDetector_GetLastReorgEvent_Call) Return(_a0 reorgdetector.ReorgEvent, _a1 error) *ReorgDetector_GetLastReorgEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReorgDetector_GetLastReorgEvent_Call) RunAndReturn(run func(context.Context) (reorgdetector.ReorgEvent, error)) *ReorgDetector_GetLastReorgEvent_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *ReorgDetector) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReorgDetector_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type ReorgDetector_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *ReorgDetector_Expecter) String() *ReorgDetector_String_Call {
	return &ReorgDetector_String_Call{Call: _e.mock.On("String")}
}

func (_c *ReorgDetector_String_Call) Run(run func()) *ReorgDetector_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReorgDetector_String_Call) Return(_a0 string) *ReorgDetector_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReorgDetector_String_Call) RunAndReturn(run func() string) *ReorgDetector_String_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: id
func (_m *ReorgDetector) Subscribe(id string) (*reorgdetector.Subscription, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *reorgdetector.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*reorgdetector.Subscription, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *reorgdetector.Subscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reorgdetector.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReorgDetector_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type ReorgDetector_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - id string
func (_e *ReorgDetector_Expecter) Subscribe(id interface{}) *ReorgDetector_Subscribe_Call {
	return &ReorgDetector_Subscribe_Call{Call: _e.mock.On("Subscribe", id)}
}

func (_c *ReorgDetector_Subscribe_Call) Run(run func(id string)) *ReorgDetector_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReorgDetector_Subscribe_Call) Return(_a0 *reorgdetector.Subscription, _a1 error) *ReorgDetector_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReorgDetector_Subscribe_Call) RunAndReturn(run func(string) (*reorgdetector.Subscription, error)) *ReorgDetector_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewReorgDetector creates a new instance of ReorgDetector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReorgDetector(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReorgDetector {
	mock := &ReorgDetector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
