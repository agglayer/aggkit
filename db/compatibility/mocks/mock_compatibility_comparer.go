// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CompatibilityComparer is an autogenerated mock type for the CompatibilityComparer type
type CompatibilityComparer[T any] struct {
	mock.Mock
}

type CompatibilityComparer_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *CompatibilityComparer[T]) EXPECT() *CompatibilityComparer_Expecter[T] {
	return &CompatibilityComparer_Expecter[T]{mock: &_m.Mock}
}

// IsCompatible provides a mock function with given fields: storage
func (_m *CompatibilityComparer[T]) IsCompatible(storage T) error {
	ret := _m.Called(storage)

	if len(ret) == 0 {
		panic("no return value specified for IsCompatible")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(storage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompatibilityComparer_IsCompatible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCompatible'
type CompatibilityComparer_IsCompatible_Call[T any] struct {
	*mock.Call
}

// IsCompatible is a helper method to define mock.On call
//   - storage T
func (_e *CompatibilityComparer_Expecter[T]) IsCompatible(storage interface{}) *CompatibilityComparer_IsCompatible_Call[T] {
	return &CompatibilityComparer_IsCompatible_Call[T]{Call: _e.mock.On("IsCompatible", storage)}
}

func (_c *CompatibilityComparer_IsCompatible_Call[T]) Run(run func(storage T)) *CompatibilityComparer_IsCompatible_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *CompatibilityComparer_IsCompatible_Call[T]) Return(_a0 error) *CompatibilityComparer_IsCompatible_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompatibilityComparer_IsCompatible_Call[T]) RunAndReturn(run func(T) error) *CompatibilityComparer_IsCompatible_Call[T] {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *CompatibilityComparer[T]) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CompatibilityComparer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type CompatibilityComparer_String_Call[T any] struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *CompatibilityComparer_Expecter[T]) String() *CompatibilityComparer_String_Call[T] {
	return &CompatibilityComparer_String_Call[T]{Call: _e.mock.On("String")}
}

func (_c *CompatibilityComparer_String_Call[T]) Run(run func()) *CompatibilityComparer_String_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompatibilityComparer_String_Call[T]) Return(_a0 string) *CompatibilityComparer_String_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompatibilityComparer_String_Call[T]) RunAndReturn(run func() string) *CompatibilityComparer_String_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewCompatibilityComparer creates a new instance of CompatibilityComparer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompatibilityComparer[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *CompatibilityComparer[T] {
	mock := &CompatibilityComparer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
