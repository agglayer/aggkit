// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// SQLTxer is an autogenerated mock type for the SQLTxer type
type SQLTxer struct {
	mock.Mock
}

type SQLTxer_Expecter struct {
	mock *mock.Mock
}

func (_m *SQLTxer) EXPECT() *SQLTxer_Expecter {
	return &SQLTxer_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with no fields
func (_m *SQLTxer) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SQLTxer_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type SQLTxer_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *SQLTxer_Expecter) Commit() *SQLTxer_Commit_Call {
	return &SQLTxer_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *SQLTxer_Commit_Call) Run(run func()) *SQLTxer_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SQLTxer_Commit_Call) Return(_a0 error) *SQLTxer_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLTxer_Commit_Call) RunAndReturn(run func() error) *SQLTxer_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: query, args
func (_m *SQLTxer) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLTxer_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type SQLTxer_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *SQLTxer_Expecter) Exec(query interface{}, args ...interface{}) *SQLTxer_Exec_Call {
	return &SQLTxer_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *SQLTxer_Exec_Call) Run(run func(query string, args ...interface{})) *SQLTxer_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLTxer_Exec_Call) Return(_a0 sql.Result, _a1 error) *SQLTxer_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLTxer_Exec_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *SQLTxer_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *SQLTxer) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLTxer_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type SQLTxer_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *SQLTxer_Expecter) Query(query interface{}, args ...interface{}) *SQLTxer_Query_Call {
	return &SQLTxer_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *SQLTxer_Query_Call) Run(run func(query string, args ...interface{})) *SQLTxer_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLTxer_Query_Call) Return(_a0 *sql.Rows, _a1 error) *SQLTxer_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLTxer_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *SQLTxer_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: query, args
func (_m *SQLTxer) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// SQLTxer_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type SQLTxer_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *SQLTxer_Expecter) QueryRow(query interface{}, args ...interface{}) *SQLTxer_QueryRow_Call {
	return &SQLTxer_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{query}, args...)...)}
}

func (_c *SQLTxer_QueryRow_Call) Run(run func(query string, args ...interface{})) *SQLTxer_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SQLTxer_QueryRow_Call) Return(_a0 *sql.Row) *SQLTxer_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLTxer_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) *sql.Row) *SQLTxer_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *SQLTxer) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SQLTxer_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type SQLTxer_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *SQLTxer_Expecter) Rollback() *SQLTxer_Rollback_Call {
	return &SQLTxer_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *SQLTxer_Rollback_Call) Run(run func()) *SQLTxer_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SQLTxer_Rollback_Call) Return(_a0 error) *SQLTxer_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLTxer_Rollback_Call) RunAndReturn(run func() error) *SQLTxer_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewSQLTxer creates a new instance of SQLTxer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLTxer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLTxer {
	mock := &SQLTxer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
