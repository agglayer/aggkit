// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	opnode "github.com/agglayer/aggkit/opnode"
	mock "github.com/stretchr/testify/mock"
)

// OpNodeClienter is an autogenerated mock type for the OpNodeClienter type
type OpNodeClienter struct {
	mock.Mock
}

type OpNodeClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *OpNodeClienter) EXPECT() *OpNodeClienter_Expecter {
	return &OpNodeClienter_Expecter{mock: &_m.Mock}
}

// FinalizedL2Block provides a mock function with no fields
func (_m *OpNodeClienter) FinalizedL2Block() (*opnode.BlockInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedL2Block")
	}

	var r0 *opnode.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*opnode.BlockInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *opnode.BlockInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opnode.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpNodeClienter_FinalizedL2Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedL2Block'
type OpNodeClienter_FinalizedL2Block_Call struct {
	*mock.Call
}

// FinalizedL2Block is a helper method to define mock.On call
func (_e *OpNodeClienter_Expecter) FinalizedL2Block() *OpNodeClienter_FinalizedL2Block_Call {
	return &OpNodeClienter_FinalizedL2Block_Call{Call: _e.mock.On("FinalizedL2Block")}
}

func (_c *OpNodeClienter_FinalizedL2Block_Call) Run(run func()) *OpNodeClienter_FinalizedL2Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OpNodeClienter_FinalizedL2Block_Call) Return(_a0 *opnode.BlockInfo, _a1 error) *OpNodeClienter_FinalizedL2Block_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpNodeClienter_FinalizedL2Block_Call) RunAndReturn(run func() (*opnode.BlockInfo, error)) *OpNodeClienter_FinalizedL2Block_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpNodeClienter creates a new instance of OpNodeClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpNodeClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpNodeClienter {
	mock := &OpNodeClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
