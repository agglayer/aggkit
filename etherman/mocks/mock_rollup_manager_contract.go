// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	polygonrollupmanager "github.com/0xPolygon/cdk-contracts-tooling/contracts/pp/l2-sovereign-chain/polygonrollupmanager"
)

// RollupManagerContract is an autogenerated mock type for the RollupManagerContract type
type RollupManagerContract struct {
	mock.Mock
}

type RollupManagerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *RollupManagerContract) EXPECT() *RollupManagerContract_Expecter {
	return &RollupManagerContract_Expecter{mock: &_m.Mock}
}

// RollupAddressToID provides a mock function with given fields: opts, rollupAddress
func (_m *RollupManagerContract) RollupAddressToID(opts *bind.CallOpts, rollupAddress common.Address) (uint32, error) {
	ret := _m.Called(opts, rollupAddress)

	if len(ret) == 0 {
		panic("no return value specified for RollupAddressToID")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (uint32, error)); ok {
		return rf(opts, rollupAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) uint32); ok {
		r0 = rf(opts, rollupAddress)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, rollupAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupManagerContract_RollupAddressToID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollupAddressToID'
type RollupManagerContract_RollupAddressToID_Call struct {
	*mock.Call
}

// RollupAddressToID is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - rollupAddress common.Address
func (_e *RollupManagerContract_Expecter) RollupAddressToID(opts interface{}, rollupAddress interface{}) *RollupManagerContract_RollupAddressToID_Call {
	return &RollupManagerContract_RollupAddressToID_Call{Call: _e.mock.On("RollupAddressToID", opts, rollupAddress)}
}

func (_c *RollupManagerContract_RollupAddressToID_Call) Run(run func(opts *bind.CallOpts, rollupAddress common.Address)) *RollupManagerContract_RollupAddressToID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *RollupManagerContract_RollupAddressToID_Call) Return(_a0 uint32, _a1 error) *RollupManagerContract_RollupAddressToID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RollupManagerContract_RollupAddressToID_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (uint32, error)) *RollupManagerContract_RollupAddressToID_Call {
	_c.Call.Return(run)
	return _c
}

// RollupIDToRollupData provides a mock function with given fields: opts, rollupID
func (_m *RollupManagerContract) RollupIDToRollupData(opts *bind.CallOpts, rollupID uint32) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error) {
	ret := _m.Called(opts, rollupID)

	if len(ret) == 0 {
		panic("no return value specified for RollupIDToRollupData")
	}

	var r0 polygonrollupmanager.PolygonRollupManagerRollupDataReturn
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error)); ok {
		return rf(opts, rollupID)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32) polygonrollupmanager.PolygonRollupManagerRollupDataReturn); ok {
		r0 = rf(opts, rollupID)
	} else {
		r0 = ret.Get(0).(polygonrollupmanager.PolygonRollupManagerRollupDataReturn)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint32) error); ok {
		r1 = rf(opts, rollupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupManagerContract_RollupIDToRollupData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollupIDToRollupData'
type RollupManagerContract_RollupIDToRollupData_Call struct {
	*mock.Call
}

// RollupIDToRollupData is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - rollupID uint32
func (_e *RollupManagerContract_Expecter) RollupIDToRollupData(opts interface{}, rollupID interface{}) *RollupManagerContract_RollupIDToRollupData_Call {
	return &RollupManagerContract_RollupIDToRollupData_Call{Call: _e.mock.On("RollupIDToRollupData", opts, rollupID)}
}

func (_c *RollupManagerContract_RollupIDToRollupData_Call) Run(run func(opts *bind.CallOpts, rollupID uint32)) *RollupManagerContract_RollupIDToRollupData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(uint32))
	})
	return _c
}

func (_c *RollupManagerContract_RollupIDToRollupData_Call) Return(_a0 polygonrollupmanager.PolygonRollupManagerRollupDataReturn, _a1 error) *RollupManagerContract_RollupIDToRollupData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RollupManagerContract_RollupIDToRollupData_Call) RunAndReturn(run func(*bind.CallOpts, uint32) (polygonrollupmanager.PolygonRollupManagerRollupDataReturn, error)) *RollupManagerContract_RollupIDToRollupData_Call {
	_c.Call.Return(run)
	return _c
}

// NewRollupManagerContract creates a new instance of RollupManagerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRollupManagerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *RollupManagerContract {
	mock := &RollupManagerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
