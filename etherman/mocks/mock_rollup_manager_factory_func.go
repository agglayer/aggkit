// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	etherman "github.com/agglayer/aggkit/etherman"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/types"
)

// RollupManagerFactoryFunc is an autogenerated mock type for the RollupManagerFactoryFunc type
type RollupManagerFactoryFunc struct {
	mock.Mock
}

type RollupManagerFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *RollupManagerFactoryFunc) EXPECT() *RollupManagerFactoryFunc_Expecter {
	return &RollupManagerFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: rollupAddress, client
func (_m *RollupManagerFactoryFunc) Execute(rollupAddress common.Address, client types.BaseEthereumClienter) (etherman.RollupManagerContract, error) {
	ret := _m.Called(rollupAddress, client)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 etherman.RollupManagerContract
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, types.BaseEthereumClienter) (etherman.RollupManagerContract, error)); ok {
		return rf(rollupAddress, client)
	}
	if rf, ok := ret.Get(0).(func(common.Address, types.BaseEthereumClienter) etherman.RollupManagerContract); ok {
		r0 = rf(rollupAddress, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(etherman.RollupManagerContract)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, types.BaseEthereumClienter) error); ok {
		r1 = rf(rollupAddress, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupManagerFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RollupManagerFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - rollupAddress common.Address
//   - client types.BaseEthereumClienter
func (_e *RollupManagerFactoryFunc_Expecter) Execute(rollupAddress interface{}, client interface{}) *RollupManagerFactoryFunc_Execute_Call {
	return &RollupManagerFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", rollupAddress, client)}
}

func (_c *RollupManagerFactoryFunc_Execute_Call) Run(run func(rollupAddress common.Address, client types.BaseEthereumClienter)) *RollupManagerFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(types.BaseEthereumClienter))
	})
	return _c
}

func (_c *RollupManagerFactoryFunc_Execute_Call) Return(_a0 etherman.RollupManagerContract, _a1 error) *RollupManagerFactoryFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RollupManagerFactoryFunc_Execute_Call) RunAndReturn(run func(common.Address, types.BaseEthereumClienter) (etherman.RollupManagerContract, error)) *RollupManagerFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewRollupManagerFactoryFunc creates a new instance of RollupManagerFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRollupManagerFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *RollupManagerFactoryFunc {
	mock := &RollupManagerFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
