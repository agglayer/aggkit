// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	bridgesync "github.com/agglayer/aggkit/bridgesync"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/agglayer/aggkit/tree/types"
)

// Bridger is an autogenerated mock type for the Bridger type
type Bridger struct {
	mock.Mock
}

type Bridger_Expecter struct {
	mock *mock.Mock
}

func (_m *Bridger) EXPECT() *Bridger_Expecter {
	return &Bridger_Expecter{mock: &_m.Mock}
}

// GetProof provides a mock function with given fields: ctx, depositCount, localExitRoot
func (_m *Bridger) GetProof(ctx context.Context, depositCount uint32, localExitRoot common.Hash) (types.Proof, error) {
	ret := _m.Called(ctx, depositCount, localExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetProof")
	}

	var r0 types.Proof
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) (types.Proof, error)); ok {
		return rf(ctx, depositCount, localExitRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Hash) types.Proof); ok {
		r0 = rf(ctx, depositCount, localExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Hash) error); ok {
		r1 = rf(ctx, depositCount, localExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bridger_GetProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProof'
type Bridger_GetProof_Call struct {
	*mock.Call
}

// GetProof is a helper method to define mock.On call
//   - ctx context.Context
//   - depositCount uint32
//   - localExitRoot common.Hash
func (_e *Bridger_Expecter) GetProof(ctx interface{}, depositCount interface{}, localExitRoot interface{}) *Bridger_GetProof_Call {
	return &Bridger_GetProof_Call{Call: _e.mock.On("GetProof", ctx, depositCount, localExitRoot)}
}

func (_c *Bridger_GetProof_Call) Run(run func(ctx context.Context, depositCount uint32, localExitRoot common.Hash)) *Bridger_GetProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(common.Hash))
	})
	return _c
}

func (_c *Bridger_GetProof_Call) Return(_a0 types.Proof, _a1 error) *Bridger_GetProof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Bridger_GetProof_Call) RunAndReturn(run func(context.Context, uint32, common.Hash) (types.Proof, error)) *Bridger_GetProof_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootByLER provides a mock function with given fields: ctx, ler
func (_m *Bridger) GetRootByLER(ctx context.Context, ler common.Hash) (*types.Root, error) {
	ret := _m.Called(ctx, ler)

	if len(ret) == 0 {
		panic("no return value specified for GetRootByLER")
	}

	var r0 *types.Root
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Root, error)); ok {
		return rf(ctx, ler)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Root); ok {
		r0 = rf(ctx, ler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Root)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, ler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bridger_GetRootByLER_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootByLER'
type Bridger_GetRootByLER_Call struct {
	*mock.Call
}

// GetRootByLER is a helper method to define mock.On call
//   - ctx context.Context
//   - ler common.Hash
func (_e *Bridger_Expecter) GetRootByLER(ctx interface{}, ler interface{}) *Bridger_GetRootByLER_Call {
	return &Bridger_GetRootByLER_Call{Call: _e.mock.On("GetRootByLER", ctx, ler)}
}

func (_c *Bridger_GetRootByLER_Call) Run(run func(ctx context.Context, ler common.Hash)) *Bridger_GetRootByLER_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *Bridger_GetRootByLER_Call) Return(_a0 *types.Root, _a1 error) *Bridger_GetRootByLER_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Bridger_GetRootByLER_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Root, error)) *Bridger_GetRootByLER_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenMappings provides a mock function with given fields: ctx, page, pageSize
func (_m *Bridger) GetTokenMappings(ctx context.Context, page *uint32, pageSize *uint32) ([]*bridgesync.TokenMapping, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenMappings")
	}

	var r0 []*bridgesync.TokenMapping
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint32, *uint32) ([]*bridgesync.TokenMapping, int, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint32, *uint32) []*bridgesync.TokenMapping); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bridgesync.TokenMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint32, *uint32) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uint32, *uint32) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Bridger_GetTokenMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenMappings'
type Bridger_GetTokenMappings_Call struct {
	*mock.Call
}

// GetTokenMappings is a helper method to define mock.On call
//   - ctx context.Context
//   - page *uint32
//   - pageSize *uint32
func (_e *Bridger_Expecter) GetTokenMappings(ctx interface{}, page interface{}, pageSize interface{}) *Bridger_GetTokenMappings_Call {
	return &Bridger_GetTokenMappings_Call{Call: _e.mock.On("GetTokenMappings", ctx, page, pageSize)}
}

func (_c *Bridger_GetTokenMappings_Call) Run(run func(ctx context.Context, page *uint32, pageSize *uint32)) *Bridger_GetTokenMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint32), args[2].(*uint32))
	})
	return _c
}

func (_c *Bridger_GetTokenMappings_Call) Return(_a0 []*bridgesync.TokenMapping, _a1 int, _a2 error) *Bridger_GetTokenMappings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Bridger_GetTokenMappings_Call) RunAndReturn(run func(context.Context, *uint32, *uint32) ([]*bridgesync.TokenMapping, int, error)) *Bridger_GetTokenMappings_Call {
	_c.Call.Return(run)
	return _c
}

// NewBridger creates a new instance of Bridger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBridger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bridger {
	mock := &Bridger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
