{
  "openrpc": "1.0.0",
  "info": {
    "title": "Aggkit Endpoints",
    "version": "0.0.1"
  },
  "methods": [
    {
      "name": "bridge_getTokenMappings",
      "summary": "Get Token Mappings",
      "description": "Returns the token mappings for the given network.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "name": "page",
          "description": "The page number for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        },
        {
          "name": "pageSize",
          "description": "The number of items per page for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The token mappings result.",
        "schema": {
          "type": "object",
          "properties": {
            "tokenMappings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "block_num": {
                    "$ref": "#/components/schemas/BlockNumber"
                  },
                  "block_pos": {
                    "$ref": "#/components/schemas/BlockPosition"
                  },
                  "block_timestamp": {
                    "type": "integer",
                    "description": "The unix timestamp for when the block was collated"
                  },
                  "tx_hash": {
                    "$ref": "#/components/schemas/Keccak"
                  },
                  "origin_network": {
                    "$ref": "#/components/schemas/OriginNetwork"
                  },
                  "origin_token_address": {
                    "$ref": "#/components/schemas/OriginTokenAddress"
                  },
                  "wrapped_token_address": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/Bytes"
                  },
                  "calldata": {
                    "$ref": "#/components/schemas/Bytes"
                  },
                  "token_type": {
                    "$ref": "#/components/schemas/TokenType"
                  }
                }
              }
            },
            "totalTokenMappings": {
              "type": "integer",
              "description": "The total number of token mappings."
            }
          }
        }
      }
    },
    {
      "name": "bridge_getBridges",
      "summary": "Get Bridges",
      "description": "Returns the bridges for the given network.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "name": "page",
          "description": "The page number for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        },
        {
          "name": "pageSize",
          "description": "The number of items per page for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        },
        {
          "name": "depositCount",
          "description": "Fetch the specific deposit count bridge",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint64"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The bridges result.",
        "schema": {
          "type": "object",
          "properties": {
            "bridges": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "block_num": {
                    "$ref": "#/components/schemas/BlockNumber"
                  },
                  "block_pos": {
                    "$ref": "#/components/schemas/BlockPosition"
                  },
                  "leaf_type": {
                    "$ref": "#/components/schemas/LeafType"
                  },
                  "origin_network": {
                    "$ref": "#/components/schemas/OriginNetwork"
                  },
                  "origin_address": {
                    "$ref": "#/components/schemas/OriginTokenAddress"
                  },
                  "destination_network": {
                    "$ref": "#/components/schemas/DestinationNetwork"
                  },
                  "destination_address": {
                    "$ref": "#/components/schemas/DestinationAddress"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/Amount"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/Bytes"
                  },
                  "depositCount": {
                    "$ref": "#/components/schemas/DepositCount"
                  },
                  "blockTimestamp": {
                    "type": "integer",
                    "description": "The unix timestamp for when the block was collated"
                  },
                  "txHash": {
                    "$ref": "#/components/schemas/Keccak"
                  },
                  "fromAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "bridgeHash": {
                    "$ref": "#/components/schemas/Keccak"
                  }
                }
              }
            },
            "count": {
              "type": "integer",
              "description": "The total number of bridges."
            }
          }
        }
      }
    },
    {
      "name": "bridge_getClaims",
      "summary": "Get Claims",
      "description": "Returns the claims for the given network.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "name": "page",
          "description": "The page number for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        },
        {
          "name": "pageSize",
          "description": "The number of items per page for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The claims result.",
        "schema": {
          "type": "object",
          "properties": {
            "bridges": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "global_index": {
                    "$ref": "#/components/schemas/GlobalIndex"
                  },
                  "destination_network": {
                    "$ref": "#/components/schemas/DestinationNetwork"
                  },
                  "txHash": {
                    "$ref": "#/components/schemas/Keccak"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/Amount"
                  },
                  "block_num": {
                    "$ref": "#/components/schemas/BlockNumber"
                  },
                  "fromAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "destination_address": {
                    "$ref": "#/components/schemas/DestinationAddress"
                  },
                  "origin_address": {
                    "$ref": "#/components/schemas/OriginTokenAddress"
                  },
                  "origin_network": {
                    "$ref": "#/components/schemas/OriginNetwork"
                  },
                  "blockTimestamp": {
                    "type": "integer",
                    "description": "The unix timestamp for when the block was collated"
                  }
                }
              }
            },
            "count": {
              "type": "integer",
              "description": "The total number of claims."
            }
          }
        }
      }
    },
    {
      "name": "bridge_getLegacyTokenMigrations",
      "summary": "Get Legacy Token Migrations",
      "description": "Returns the legacy token migrations for the given network.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "name": "page",
          "description": "The page number for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        },
        {
          "name": "pageSize",
          "description": "The number of items per page for pagination.",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "uint32"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The legacy token migrations result.",
        "schema": {
          "type": "object",
          "properties": {
            "legacyTokenMigrations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "block_num": {
                    "$ref": "#/components/schemas/BlockNumber"
                  },
                  "block_pos": {
                    "$ref": "#/components/schemas/BlockPosition"
                  },
                  "block_timestamp": {
                    "type": "integer",
                    "description": "The unix timestamp for when the block was collated"
                  },
                  "tx_hash": {
                    "$ref": "#/components/schemas/Keccak"
                  },
                  "sender": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "legacy_token_address": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "updated_token_address": {
                    "$ref": "#/components/schemas/OriginTokenAddress"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/Integer"
                  },
                  "calldata": {
                    "$ref": "#/components/schemas/Bytes"
                  }
                }
              }
            },
            "totalTokenMigrations": {
              "type": "integer",
              "description": "The total number of legacy token migrations."
            }
          }
        }
      }
    },
    {
      "name": "bridge_l1InfoTreeIndexForBridge",
      "summary": "Returns the first L1 Info Tree index in which the bridge was included. NetworkID represents the origin network. This call needs to be done to a client of the same network were the bridge tx was sent",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "$ref": "#/components/contentDescriptors/DepositCount"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/L1InfoTreeIndex"
      },
      "examples": [
        {
          "name": "example",
          "params": [],
          "result": {
            "name": "exampleResult",
            "value": "0x1"
          }
        }
      ]
    },
    {
      "name": "bridge_injectedInfoAfterIndex",
      "summary": "Return the first GER injected onto the network that is linked to the given index or greater. This call is useful to understand when a bridge is ready to be claimed on its destination network",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "$ref": "#/components/contentDescriptors/L1InfoTreeIndex"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/L1InfoTreeLeaf"
      },
      "examples": []
    },
    {
      "name": "bridge_getProof",
      "summary": "Gets the proof needed to perform a claim for a given bridge",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        },
        {
          "$ref": "#/components/contentDescriptors/DepositCount"
        },
        {
          "$ref": "#/components/contentDescriptors/L1InfoTreeIndex"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Proof"
      },
      "examples": []
    },
    {
      "name": "bridge_sponsorClaim",
      "summary": "Request to sponsor the claim tx for a given bridge",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/SponsorClaim"
        }
      ],
      "result": {
        "name": "empty",
        "schema": {
          "type": "null"
        }
      },
      "examples": []
    },
    {
      "name": "bridge_getLastReorgEvent",
      "summary": "Get Last Reorg Event",
      "description": "Fetches the last detected reorganization event from the reorg detector.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/NetworkID"
        }
      ],
      "result": {
        "name": "result",
        "description": "The last detected reorg event.",
        "schema": {
          "type": "object",
          "properties": {
            "detected_at": {
              "type": "integer",
              "description": "The Unix timestamp when the reorg was detected."
            },
            "from_block": {
              "type": "integer",
              "description": "Starting block number of the reorg."
            },
            "to_block": {
              "type": "integer",
              "description": "Ending block number of the reorg."
            }
          },
          "required": [
            "detected_at",
            "from_block",
            "to_block"
          ]
        }
      }
    },
    {
      "name": "bridge_getSponsoredClaimStatus",
      "summary": "Gets the proof needed to perform a claim for a given bridge",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/GlobalIndex"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/ClaimStatus"
      },
      "examples": []
    }
  ],
  "components": {
    "contentDescriptors": {
      "NetworkID": {
        "name": "networkID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/NetworkID"
        }
      },
      "DepositCount": {
        "name": "depositCount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/DepositCount"
        }
      },
      "L1InfoTreeIndex": {
        "name": "l1InfoTreeIndex",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/L1InfoTreeIndex"
        }
      },
      "L1InfoTreeLeaf": {
        "name": "l1InfoTreeLeaf",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/L1InfoTreeLeaf"
        }
      },
      "Proof": {
        "name": "proof",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Proof"
        }
      },
      "SponsorClaim": {
        "name": "sponsorClaim",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/SponsorClaim"
        }
      },
      "GlobalIndex": {
        "name": "global_index",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GlobalIndex"
        }
      },
      "ClaimStatus": {
        "name": "claimStatus",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ClaimStatus"
        }
      }
    },
    "schemas": {
      "Bytes": {
        "title": "bytes",
        "type": "string",
        "description": "Hex representation of a variable length byte array",
        "pattern": "^0x([a-fA-F0-9]?)+$"
      },
      "Integer": {
        "title": "integer",
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]+$",
        "description": "Hex representation of the integer"
      },
      "Keccak": {
        "title": "keccak",
        "type": "string",
        "description": "Hex representation of a Keccak 256 hash",
        "pattern": "^0x[a-fA-F\\d]{64}$"
      },
      "Address": {
        "title": "address",
        "type": "string",
        "pattern": "^0x[a-fA-F\\d]{40}$"
      },
      "BlockHash": {
        "title": "blockHash",
        "type": "string",
        "pattern": "^0x[a-fA-F\\d]{64}$",
        "description": "The hex representation of the Keccak 256 of the RLP encoded block"
      },
      "BlockNumber": {
        "title": "block_number",
        "type": "string",
        "description": "The hex representation of the block's height",
        "$ref": "#/components/schemas/Integer"
      },
      "BlockPosition": {
        "title": "block_position",
        "type": "string",
        "description": "The hex representation of the position inside the block",
        "$ref": "#/components/schemas/Integer"
      },
      "NetworkID": {
        "title": "networkID",
        "type": "string",
        "description": "The hex representation of the network ID",
        "$ref": "#/components/schemas/Integer"
      },
      "DepositCount": {
        "title": "depositCount",
        "type": "string",
        "description": "The hex representation of the deposit count",
        "$ref": "#/components/schemas/Integer"
      },
      "L1InfoTreeIndex": {
        "title": "l1InfoTreeIndex",
        "type": "string",
        "description": "The hex representation of the L1 info tree index",
        "$ref": "#/components/schemas/Integer"
      },
      "L1InfoTreeLeaf": {
        "title": "l1InfoTreeLeaf",
        "type": "object",
        "readOnly": true,
        "properties": {
          "block_number": {
            "$ref": "#/components/schemas/BlockNumber"
          },
          "block_position": {
            "$ref": "#/components/schemas/BlockPosition"
          },
          "previousBlockHash": {
            "$ref": "#/components/schemas/Keccak"
          },
          "timestamp": {
            "title": "blockTimeStamp",
            "type": "string",
            "description": "The unix timestamp for when the block was collated"
          },
          "l1InfoTreeIndex": {
            "$ref": "#/components/schemas/L1InfoTreeIndex"
          },
          "mainnet_exit_root": {
            "$ref": "#/components/schemas/Keccak"
          },
          "rollup_exit_root": {
            "$ref": "#/components/schemas/Keccak"
          },
          "globalExitRoot": {
            "$ref": "#/components/schemas/Keccak"
          },
          "hash": {
            "$ref": "#/components/schemas/Keccak"
          }
        }
      },
      "MerkleProof": {
        "title": "merkleProof",
        "type": "array",
        "description": "Array of hashes that constitute a merkle proof",
        "items": {
          "$ref": "#/components/schemas/Keccak"
        }
      },
      "ProofLocalExitRoot": {
        "title": "proofLocalExitRoot",
        "description": "Merkle Proof that proofs the existance of a deposit in the local exit tree of a network",
        "$ref": "#/components/schemas/MerkleProof"
      },
      "ProofRollupExitRoot": {
        "title": "proofLocalExitRoot",
        "description": "Merkle Proof that proofs the existance of a deposit in the local exit tree of a network",
        "$ref": "#/components/schemas/MerkleProof"
      },
      "Proof": {
        "title": "proof",
        "type": "object",
        "readOnly": true,
        "properties": {
          "l1InfoTreeLeaf": {
            "$ref": "#/components/schemas/L1InfoTreeLeaf"
          },
          "proofLocalExitRoot": {
            "$ref": "#/components/schemas/ProofLocalExitRoot"
          },
          "proofRollupExitRoot": {
            "$ref": "#/components/schemas/ProofRollupExitRoot"
          }
        }
      },
      "LeafType": {
        "title": "leaf_type",
        "type": "string",
        "description": "The hex representation of the leaf type",
        "$ref": "#/components/schemas/Integer"
      },
      "GlobalIndex": {
        "title": "global_index",
        "type": "string",
        "description": "The hex representation of the global index",
        "$ref": "#/components/schemas/Integer"
      },
      "OriginNetwork": {
        "title": "origin_network",
        "type": "string",
        "description": "The hex representation of the origin network ID of the token",
        "$ref": "#/components/schemas/Integer"
      },
      "OriginTokenAddress": {
        "title": "origin_token_address",
        "type": "string",
        "description": "address of the token on it's origin network",
        "$ref": "#/components/schemas/Address"
      },
      "DestinationNetwork": {
        "title": "destination_network",
        "type": "string",
        "description": "The hex representation of the destination network ID",
        "$ref": "#/components/schemas/Integer"
      },
      "DestinationAddress": {
        "title": "destination_address",
        "type": "string",
        "description": "address of the receiver of the bridge",
        "$ref": "#/components/schemas/Address"
      },
      "Amount": {
        "title": "amount",
        "description": "Amount of tokens being bridged",
        "$ref": "#/components/schemas/Keccak"
      },
      "Metadata": {
        "title": "metadata",
        "description": "Extra data included in the bridge",
        "$ref": "#/components/schemas/Bytes"
      },
      "SponsorClaim": {
        "title": "sponsorClaim",
        "type": "object",
        "readOnly": true,
        "properties": {
          "leaf_type": {
            "$ref": "#/components/schemas/LeafType"
          },
          "proofLocalExitRoot": {
            "$ref": "#/components/schemas/ProofLocalExitRoot"
          },
          "proofRollupExitRoot": {
            "$ref": "#/components/schemas/ProofRollupExitRoot"
          },
          "global_index": {
            "$ref": "#/components/schemas/GlobalIndex"
          },
          "mainnet_exit_root": {
            "$ref": "#/components/schemas/Keccak"
          },
          "rollup_exit_root": {
            "$ref": "#/components/schemas/Keccak"
          },
          "origin_network": {
            "$ref": "#/components/schemas/OriginNetwork"
          },
          "origin_token_address": {
            "$ref": "#/components/schemas/OriginTokenAddress"
          },
          "destination_network": {
            "$ref": "#/components/schemas/DestinationNetwork"
          },
          "destination_address": {
            "$ref": "#/components/schemas/DestinationAddress"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ClaimStatus": {
        "title": "claimStatus",
        "description": "The status of a claim",
        "type": "string",
        "enum": [
          "pending",
          "failed",
          "success"
        ]
      },
      "TokenType": {
        "type": "integer",
        "description": "Token type: 0 = WrappedToken, 1 = SovereignToken",
        "enum": [
          0,
          1
        ],
        "enumNames": [
          "WrappedToken",
          "SovereignToken"
        ]
      }
    }
  }
}