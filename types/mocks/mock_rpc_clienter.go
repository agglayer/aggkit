// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RPCClienter is an autogenerated mock type for the RPCClienter type
type RPCClienter struct {
	mock.Mock
}

type RPCClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *RPCClienter) EXPECT() *RPCClienter_Expecter {
	return &RPCClienter_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: result, method, args
func (_m *RPCClienter) Call(result any, method string, args ...any) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any, string, ...any) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RPCClienter_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type RPCClienter_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - result any
//   - method string
//   - args ...any
func (_e *RPCClienter_Expecter) Call(result interface{}, method interface{}, args ...interface{}) *RPCClienter_Call_Call {
	return &RPCClienter_Call_Call{Call: _e.mock.On("Call",
		append([]interface{}{result, method}, args...)...)}
}

func (_c *RPCClienter_Call_Call) Run(run func(result any, method string, args ...any)) *RPCClienter_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(any), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *RPCClienter_Call_Call) Return(_a0 error) *RPCClienter_Call_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RPCClienter_Call_Call) RunAndReturn(run func(any, string, ...any) error) *RPCClienter_Call_Call {
	_c.Call.Return(run)
	return _c
}

// NewRPCClienter creates a new instance of RPCClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPCClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPCClienter {
	mock := &RPCClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
